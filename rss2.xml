<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Interstellar</title>
    <link>http://hreatehakunari.com/</link>
    
    <atom:link href="http://hreatehakunari.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Do not go gentle into that good night.</description>
    <pubDate>Wed, 16 Mar 2022 13:16:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Vue3结构</title>
      <link>http://hreatehakunari.com/2022/03/16/Vue3%E7%BB%93%E6%9E%84/</link>
      <guid>http://hreatehakunari.com/2022/03/16/Vue3%E7%BB%93%E6%9E%84/</guid>
      <pubDate>Wed, 16 Mar 2022 13:15:20 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;04-1-Vue3基本结构&quot;&gt;&lt;a href=&quot;#04-1-Vue3基本结构&quot; class=&quot;headerlink&quot; title=&quot;04.1 Vue3基本结构&quot;&gt;&lt;/a&gt;04.1 Vue3基本结构&lt;/h1&gt;&lt;h2 id=&quot;1-初始代码结构&quot;&gt;&lt;a href=&quot;#1-初始代码结构&quot; class=&quot;headerlink&quot; title=&quot;1. 初始代码结构&quot;&gt;&lt;/a&gt;1. 初始代码结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;main.ts：主入口文件&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//引入 createApp 函数，创建对应的应用，产生应用的实例对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123;createApp&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//引入 App 组件（所有组件的父组件）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./App.vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建 App 应用返回对应的实例对象，调用 mount 方法进行挂载，挂载到 id 为 &amp;#x27;#app&amp;#x27; 的页面上面去， app 在 public/index.html 文件中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;createApp&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;Antd&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(store).&lt;span class=&quot;title function_&quot;&gt;use&lt;/span&gt;(router).&lt;span class=&quot;title function_&quot;&gt;mount&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;#app&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="04-1-Vue3基本结构"><a href="#04-1-Vue3基本结构" class="headerlink" title="04.1 Vue3基本结构"></a>04.1 Vue3基本结构</h1><h2 id="1-初始代码结构"><a href="#1-初始代码结构" class="headerlink" title="1. 初始代码结构"></a>1. 初始代码结构</h2><ul><li><p>main.ts：主入口文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 createApp 函数，创建对应的应用，产生应用的实例对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入 App 组件（所有组件的父组件）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//创建 App 应用返回对应的实例对象，调用 mount 方法进行挂载，挂载到 id 为 &#x27;#app&#x27; 的页面上面去， app 在 public/index.html 文件中</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(<span class="title class_">Antd</span>).<span class="title function_">use</span>(store).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><ul><li><p>public&#x2F;index.html：页面默认调用的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>package.json：引用包配置文件</p></li><li><p>App.vue：所有组件的父组件</p><ul><li><p><code>import &#123;defineComponent&#125; from &#39;vue&#39;</code>：导入 defineComponent 函数，此函数是为了定义组件，内部可以传入一个配置对象：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//当前组件的名字是App</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">    <span class="comment">//注册组件</span></span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">      <span class="comment">//注册一个子级组件</span></span><br><span class="line">      <span class="title class_">HelloWorld</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-Vue3-文件基本结构"><a href="#2-Vue3-文件基本结构" class="headerlink" title="2. Vue3 文件基本结构"></a>2. Vue3 文件基本结构</h2><h3 id="2-1-CompositionAPI"><a href="#2-1-CompositionAPI" class="headerlink" title="2.1 CompositionAPI"></a>2.1 CompositionAPI</h3><h3 id="2-2-setup-函数"><a href="#2-2-setup-函数" class="headerlink" title="2.2 setup()函数"></a>2.2 setup()函数</h3><h4 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h4><p>setup() 本质上就是一个顺序执行代码的函数，其中可以定义变量 、方法、返回值；</p><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>若定义了某些界面中数据的初始化方法，将方法在setup() 函数中调用即可。</p><h4 id="2-2-2-返回值"><a href="#2-2-2-返回值" class="headerlink" title="2.2.2 返回值"></a>2.2.2 返回值</h4><p>setup() 返回值一般用来返回一个对象，这个对象的属性可以在 tempate 中使用；</p><h4 id="2-2-3-示例"><a href="#2-2-3-示例" class="headerlink" title="2.2.3 示例"></a>2.2.3 示例</h4><p>需求：点击按钮可以增加显示数字的值</p><h6 id="vue2实现"><a href="#vue2实现" class="headerlink" title="vue2实现"></a>vue2实现</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;updateCount&quot;&gt;</span><br><span class="line">    更新数据</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default defineComponent&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        count: 0,//属性</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      updateCount()&#123;</span><br><span class="line">        this.count++</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="Vue3实现："><a href="#Vue3实现：" class="headerlink" title="Vue3实现："></a>Vue3实现：</h6><ul><li>错误示例：没有使用<strong>响应式数据（数据变化，页面跟着渲染变化）</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;updateCount&quot;&gt;</span><br><span class="line">    更新数据</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default defineComponent&#123;</span><br><span class="line">    //setup 函数是组合API的入口函数</span><br><span class="line">    setup()&#123;</span><br><span class="line">      //变量</span><br><span class="line">      let count = 0//</span><br><span class="line">      //方法</span><br><span class="line">      function updateCount()&#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">      //返回值：对象</span><br><span class="line">      return &#123;</span><br><span class="line">        //返回属性</span><br><span class="line">        count,</span><br><span class="line">        //返回方法</span><br><span class="line">        updateCount</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>正确示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;button @click=&quot;updateCount&quot;&gt;</span><br><span class="line">    更新数据</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default defineComponent&#123;</span><br><span class="line">    //setup 函数是组合API的入口函数</span><br><span class="line">    setup()&#123;</span><br><span class="line">      //变量</span><br><span class="line">      const count = ref(0)//</span><br><span class="line">      //方法</span><br><span class="line">      function updateCount()&#123;</span><br><span class="line">        count.value++;</span><br><span class="line">      &#125;</span><br><span class="line">      //返回值：对象</span><br><span class="line">      return &#123;</span><br><span class="line">        //返回属性</span><br><span class="line">        count,</span><br><span class="line">        //返回方法</span><br><span class="line">        updateCount</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：当数据被声明为 ref 时，就被定义为了 Ref 对象，对象本身不能进行 ++ 操作；需要使用 count.value</li></ul><h3 id="2-3-Ref-函数"><a href="#2-3-Ref-函数" class="headerlink" title="2.3 Ref() 函数"></a>2.3 Ref() 函数</h3><h4 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h4><p><code>const count = ref(1)</code></p><p>ref() 是一个函数，作用：定义一个响应式数据，返回的是一个 Ref 对象，对象中有一个 value 属性，若需要对数据进行操作，使用 <code>xxx.value </code> 即可</p><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>在 template 中使用 ref 变量时，不需要调用 .value 属性；</p><p>一般用来定义一个基本类型的响应式数据；</p><h3 id="2-4-reactive-函数"><a href="#2-4-reactive-函数" class="headerlink" title="2.4 reactive() 函数"></a>2.4 reactive() 函数</h3><h4 id="2-4-1-定义"><a href="#2-4-1-定义" class="headerlink" title="2.4.1 定义"></a>2.4.1 定义</h4><p><code>const proxy = reactive(obj)</code></p><p>reactive() 是一个函数，作用：定义多个数据的响应式，接受一个普通对象然后返回该普通对象的响应式代理器对象</p><p>reactive返回的是一个 <strong>Proxy 代理对象</strong>，被代理的目标对象就是 reactive 函数传入的对象：</p><ul><li>类型：Proxy</li><li>属性：<ul><li>Handler：处理器（内置对象）</li><li>Target：目标对象</li><li>IsRevoked</li></ul></li></ul><p>reactive() 的响应式转换是“深层的”，会影响对象内部的所有嵌套属性，如 对象的对象的属性；</p><blockquote><p>reactive() 内部是基于 ES6 的 Proxy 实现的：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy定义</a></p><p><em>Proxy 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）</em></p><p>即：Proxy 可以实现数据的代理</p><p>属性：</p><p>​    handler：包含捕捉器（trap）的占位符对象，即处理器对象</p><p>​    traps：提供属性访问的方法。类似于操作系统中捕获器的概念</p><p>​    target：被 Proxy 代理虚拟化的对象。</p><p>语法：</p><p>​    <code>const p = new Proxy(target, handler)</code></p></blockquote><h6 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    reactive的使用</span><br><span class="line">  &lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    名字：&#123;&#123;user.name&#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    年龄：&#123;&#123;user.age&#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    老婆：&#123;&#123;user.wife&#125;&#125;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;button @click=&quot;updateUser&quot;&gt;</span><br><span class="line">    更新数据</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;defineComponent, reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">export default defineComponent&#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 把复杂数据变成响应式数据</span><br><span class="line">    const user = reactive(&#123;</span><br><span class="line">      name: &#x27;小明&#x27;,</span><br><span class="line">      age: 20,</span><br><span class="line">      wife: &#123;</span><br><span class="line">        name: &#x27;小花&#x27;,</span><br><span class="line">        age: 18,</span><br><span class="line">        cars:[&#x27;奔驰&#x27;, &#x27;本田&#x27;, &#x27;大众&#x27;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    //方法</span><br><span class="line">    const updateUser = ()&#123;</span><br><span class="line">user.name = &#x27;小红&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      user</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-2-为对象增加、删除属性"><a href="#2-4-2-为对象增加、删除属性" class="headerlink" title="2.4.2 为对象增加、删除属性"></a>2.4.2 为对象增加、删除属性</h4><h6 id="增加属性"><a href="#增加属性" class="headerlink" title="增加属性"></a>增加属性</h6><p>需要在定义代理对象时在 reactive 后添加 &lt;any&gt; ，若不添加会报错：”不知道属性的类型，不能添加属性”</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineComponent, reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> user = reactive&lt;<span class="built_in">any</span>&gt;(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">wife</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">cars</span>:[<span class="string">&#x27;奔驰&#x27;</span>, <span class="string">&#x27;本田&#x27;</span>, <span class="string">&#x27;大众&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> updateUser = ()&#123;</span><br><span class="line">user.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span><span class="comment">//添加属性</span></span><br><span class="line">      <span class="keyword">delete</span> user.<span class="property">age</span><span class="comment">//删除属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-总结"><a href="#2-4-3-总结" class="headerlink" title="2.4.3 总结"></a>2.4.3 总结</h4><p>通过直接更新目标对象的值来更新界面渲染是不可能的，必须要通过 reactive(obj) 来建立一个代理对象，然后改变代理对象的 value 来通知界面；</p><h3 id="2-5-Vue3-与-Vue2-响应式的区别"><a href="#2-5-Vue3-与-Vue2-响应式的区别" class="headerlink" title="2.5 Vue3 与 Vue2 响应式的区别"></a>2.5 Vue3 与 Vue2 响应式的区别</h3><h4 id="2-5-1-Vue2-的响应式"><a href="#2-5-1-Vue2-的响应式" class="headerlink" title="2.5.1 Vue2 的响应式"></a>2.5.1 Vue2 的响应式</h4><ul><li>核心：通过 Object.defineProperty 实现，对对象已有属性值的读取和修改劫持更新；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(data, &#x27;count&#x27;, &#123;</span><br><span class="line">get()&#123;&#125;</span><br><span class="line">set()&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-5-2-Vue3-的响应式"><a href="#2-5-2-Vue3-的响应式" class="headerlink" title="2.5.2 Vue3 的响应式"></a>2.5.2 Vue3 的响应式</h4><ul><li>核心：<ul><li>通过 Proxy(代理)的代理对象，拦截对 data 任意属性的任意操作<ul><li>Proxy：实现数据代理的操作</li></ul></li><li>通过 Reflect(反射)：动态对被代理对象的相应属性进行特定操作<ul><li>Reflect中都是静态函数，配合 Proxy代理对象的一系列函数使用</li></ul></li></ul></li></ul><h4 id="2-5-3-Vue3-的响应式原理"><a href="#2-5-3-Vue3-的响应式原理" class="headerlink" title="2.5.3 Vue3 的响应式原理"></a>2.5.3 Vue3 的响应式原理</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//目标对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;佐助&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;小樱&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 把目标对象变成代理对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数1：user -&gt; target 目标对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 参数2：handler -&gt; 处理器对象，用来监视数据，及数据的操作</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params">target,prop</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get方法调用了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Refect</span>.<span class="title function_">get</span>(target, prop)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//不仅可以修改目标对象的属性值，也可以为目标对象添加新的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">target,prop,val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set方法调用了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,prop,val)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//删除目标对象上的某个属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">deleteProxy</span>(<span class="params">target,prop</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;delete方法调用了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,prop)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">deleteProperty</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//通过代理对象获取目标对象中的某个属性值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(proxyUser.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//通过代理对象更新目标对象上的某个属性值</span></span></span><br><span class="line"><span class="language-javascript">      proxyUser.<span class="property">name</span> = <span class="string">&#x27;鸣人&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//通过代理对象向目标对象中添加、删除一个属性值</span></span></span><br><span class="line"><span class="language-javascript">      proxyUser.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">delete</span> proxyUser.<span class="property">gender</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//更新目标对象中的某个属性对象中的属性值</span></span></span><br><span class="line"><span class="language-javascript">      proxyUser.<span class="property">wife</span>.<span class="property">name</span> = <span class="string">&#x27;雏田&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-setup-的细节"><a href="#2-6-setup-的细节" class="headerlink" title="2.6 setup() 的细节"></a>2.6 setup() 的细节</h3><h4 id="2-6-1-setup-在-beforeCreate-之前执行"><a href="#2-6-1-setup-在-beforeCreate-之前执行" class="headerlink" title="2.6.1 setup() 在 beforeCreate() 之前执行"></a>2.6.1 setup() 在 beforeCreate() 之前执行</h4><blockquote><p>beforeCreate()：数据初始化的生命周期回调 </p></blockquote><p>setup() 在执行的时候，当前组件还没有创建出来，所以组件的实例对象 this 不能使用，不能通过 this 来访问 data&#x2F;computed&#x2F;methods&#x2F;props 等相关内容</p><h4 id="2-6-2-setup-函数的返回值"><a href="#2-6-2-setup-函数的返回值" class="headerlink" title="2.6.2 setup() 函数的返回值"></a>2.6.2 setup() 函数的返回值</h4><ul><li>setup() 函数返回值是一个对象，内部的属性和方法是给 html 模板使用的。</li><li>setup() 内的对象的属性和 data() 函数内的对象属性都可以在 html 模板中使用。</li><li>setup() 内的对象的属性和 data() 函数内的对象属性会合并为组件对象的属性。 </li><li>setup() 内的对象的方法和 methods 对象中的方法会合并为组件对象的方法。</li><li>在 Vue3 中尽量不要混合使用 data() 和 setup() 及 methods 和 setup()</li></ul><h4 id="2-6-3-setup-函数的参数"><a href="#2-6-3-setup-函数的参数" class="headerlink" title="2.6.3 setup() 函数的参数"></a>2.6.3 setup() 函数的参数</h4><ul><li><p>props 参数：是一个对象，里面有父级组件向子级组件传递的数据，并且是在子级组件中使用 props 接受到的所有的属性</p></li><li><p>context 参数：</p><p>是一个对象，里面有 attrs 对象，emit 方法， slots 对象</p><ul><li><p>attrs：获取当前组件标签上的，<strong>没有被 <code>props</code> 声明过的</strong>所有对象；</p><p>示例：</p><p>父组件调用子组件 <code>Child</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Child txt=&quot;父组件想要子组件传递的参数：txt&quot;/&gt;</span><br></pre></td></tr></table></figure><p>子组件中有两种处理方式：</p><ul><li>props：用 <code>props</code> 接收传入的参数，并在 setup(prop, context) 函数中使用 <code>props.参数名</code> 使用该参数；</li><li>context：直接使用 <code>context.attrs.参数名</code> 使用传入的参数；</li></ul><h6 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a><strong>注意：</strong></h6><ul><li>若声明了 <code>props</code> ，就不要再使用 <code>context.attrs.参数名</code> 的方式；</li><li>若要子控件中的内容是响应式的，必须在子控件的模板中直接使用 props 中接收到的变量；不能使用自己另外定义的变量（即使用 ref 接收值也无法做到响应式，至少在 setup() 单个函数中无法做到）</li></ul></li><li><p>emit：一个函数，从父控件接收而来的事件，需要用 <code>emits</code> 属性进行接收（类似于 <code>props</code> ）否则会警告</p><p>示例：</p><p>父控件调用子控件 <code>Child</code> ，并且有传入自定义参数 <code>txt</code> 、自定义时间 <code>childEvent</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Child :txt=&quot;exportTxt&quot; @childEvent=&quot;changeExportTxt&quot;/&gt;</span><br></pre></td></tr></table></figure><p>同时，在父控件中，用 <code>changeExportsTxt</code> 方法定义事件触发的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父控件中定义事件触发的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeExportTxt</span>(<span class="params">changeText:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">  exportTxt.<span class="property">value</span> += changeText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子控件中，用 <code>emit</code> 声明接收该事件，并且使用 emit() 方法回调父控件函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;changeTxt&quot;&gt;</span><br><span class="line">    子控件：改变内容</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  props: [&#x27;txt&#x27;],</span><br><span class="line">  emit: [&#x27;childEvent&#x27;],</span><br><span class="line">  setup(props, context)&#123;</span><br><span class="line">    function changeTxt()&#123;</span><br><span class="line">      //childEvent: 事件名称</span><br><span class="line">      //更多参数：父控件中回调函数需要的参数</span><br><span class="line">      context.emit(&#x27;childEvent&#x27;, &#x27;子控件中触发事件，回调父控件的方法传入的参数&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>slots：插槽</p></li></ul><blockquote><p>在使用 attrs、slots、emit 的时候，不是一定要用 <code>setup(props, context)</code> 的写法，也可以写成 <code>setup(props, &#123;attrs, slots, emit&#125;)</code> ，用法也要根据名称对应变换。</p></blockquote></li></ul><h3 id="2-7-reactive-和-ref-的细节"><a href="#2-7-reactive-和-ref-的细节" class="headerlink" title="2.7 reactive() 和 ref() 的细节"></a>2.7 reactive() 和 ref() 的细节</h3><p>ref() 用来处理基本类型数据，reactive() 来处理对象（递归深度响应式）</p><blockquote><p>如果用 ref() 处理对象&#x2F;数组，内部会自动将对象&#x2F;数组转换为 reactive() 的代理对象，即：这种情况下ref() 声明的参数， <code>.value</code> 是一个 Proxy 类型的代理对象。</p></blockquote><h3 id="2-8-计算属性与监视"><a href="#2-8-计算属性与监视" class="headerlink" title="2.8 计算属性与监视"></a>2.8 计算属性与监视</h3><h4 id="2-8-1-计算属性："><a href="#2-8-1-计算属性：" class="headerlink" title="2.8.1 计算属性："></a>2.8.1 计算属性：</h4><p>计算属性是一种属性，在每次获取属性值的时候都调用计算方法</p><h6 id="计算属性的-get"><a href="#计算属性的-get" class="headerlink" title="计算属性的 get"></a>计算属性的 get</h6><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const fullName1 = computed(() =&gt; &#123;</span><br><span class="line">return user.firstName + &quot;_&quot; + user.lastName</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>计算属性的函数如果只传入一个回调函数，表示的是 get</p><p>计算属性本质上是一个 Ref 类型的对象</p><p>若只需要 get ，传入一个回调函数即可</p></blockquote><h6 id="计算属性的-get-amp-set"><a href="#计算属性的-get-amp-set" class="headerlink" title="计算属性的 get &amp; set"></a>计算属性的 get &amp; set</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const fullName2 = computed(&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">return user.firstName + &quot;_&quot; + user.lastName</span><br><span class="line">&#125;,</span><br><span class="line">set(val)&#123;</span><br><span class="line">const names = val.split(&#x27;_&#x27;)</span><br><span class="line">user.firstName = names[0]</span><br><span class="line">user.lastName = names[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>若需要 get 和 set ，需要传入一个对象，里面有 get(){} 和 set(){}</p></blockquote><h6 id="监视：watch"><a href="#监视：watch" class="headerlink" title="监视：watch"></a>监视：watch</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(user, (&#123;firstName, lastName&#125;) =&gt; &#123;</span><br><span class="line">fullName3.value = firstName + &#x27;_&#x27; + lastName</span><br><span class="line">&#125;,&#123;immediate: true,deep: true&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>immediate：默认会在页面创建开始就执行一次 watch()</p><p>deep：深度监视</p></blockquote><p>用 watch 监视多个数据：（仅展示监视多个数据的格式，但是由于监视的不是响应式数据，所以函数无法触发）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([user.firstName, user.lastName], ()=&gt;&#123;</span><br><span class="line">//监视回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>当使用 watch 监视非响应式的数据时，要将数据回调处理一下，如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([()=&gt;user.firstName, ()=&gt;user.lastName],()=&gt;&#123;</span><br><span class="line">//监视回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="监视：watchEffect"><a href="#监视：watchEffect" class="headerlink" title="监视：watchEffect"></a>监视：watchEffect</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(()=&gt;&#123;</span><br><span class="line">fullName3.value = user.firstName + &quot;_&quot; + user.lastName</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>watchEffect：不需要配置 immediate，本身默认就会进行监视，默认执行一次</p></blockquote><h3 id="2-9-生命周期"><a href="#2-9-生命周期" class="headerlink" title="2.9 生命周期"></a>2.9 生命周期</h3><p>Vue2 生命周期：</p><p><img src="https://gitee.com/hreatedotaer/markdown-images/raw/master/202203162116790.png" alt="Vue 实例生命周期"></p><p>Vue3 生命周期：</p><p><img src="https://gitee.com/hreatedotaer/markdown-images/raw/master/202203162116893.png" alt="image-20220316172929037"></p><p>经过对比可知，Vue2的生命周期和 Vue3 的生命周期只相差在最后的卸载，Vue2 是 Destroyed，Vue3 是 Unmounted</p><p>而与 Vue2 的版本生命周期 Option选项 相对应的 是 Vue3 的组合式API（Composition API）</p><ul><li>beforeCreate -&gt; setup()</li><li>created -&gt; setup()</li><li>brforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeDestroy -&gt; onBeforeUnmount</li><li>destroyed -&gt; onUnmounted</li><li>errorCaptured -&gt; onErrorCaptured</li></ul><blockquote><p>注意：Vue3 的 Composition API 都是写在 setup() 函数中的，被称为生命周期钩子函数</p></blockquote><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h2><h3 id="3-1-name属性的用处"><a href="#3-1-name属性的用处" class="headerlink" title="3.1 name属性的用处"></a>3.1 name属性的用处</h3><p>name 属性的作用主要有两点：</p><ul><li>允许组件在模板 <code>&lt;template&gt;</code> 中递归调用自身，如果没有具体名字时将无法在模板中做到这一点</li><li>为 <code>vue-devtools</code> 提供更友好的调试体验，具有名字的组件将获得更友好的各种开发提示</li></ul>]]></content:encoded>
      
      
      <category domain="http://hreatehakunari.com/categories/Vue/">Vue</category>
      
      
      <category domain="http://hreatehakunari.com/tags/Vue/">Vue</category>
      
      <category domain="http://hreatehakunari.com/tags/Vue3/">Vue3</category>
      
      
      <comments>http://hreatehakunari.com/2022/03/16/Vue3%E7%BB%93%E6%9E%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue详解</title>
      <link>http://hreatehakunari.com/2022/03/14/Vue%E8%AF%A6%E8%A7%A3/</link>
      <guid>http://hreatehakunari.com/2022/03/14/Vue%E8%AF%A6%E8%A7%A3/</guid>
      <pubDate>Mon, 14 Mar 2022 07:15:23 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;英文官网：&lt;a href=&quot;https://vuejs.org/%EF%BC%9B%E4%B8%AD%E6%96%87%E5%AE%98%E7%BD%91%EF%BC%9Ahttps://cn.vuejs.org/&quot;&gt;https://vuejs.org/；中文官网：https://cn.vuejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;介绍与描述：&lt;ul&gt;
&lt;li&gt;动态构建用户界面的渐进式 JavaScript 框架；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue的特点：&lt;ul&gt;
&lt;li&gt;遵循 MVVM模式；&lt;/li&gt;
&lt;li&gt;编码简洁，体积小，运行效率高，适合移动&amp;#x2F;PC端开发；&lt;/li&gt;
&lt;li&gt;它本身只关注UI，也可以引入其他第三方库开发项目；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>英文官网：<a href="https://vuejs.org/%EF%BC%9B%E4%B8%AD%E6%96%87%E5%AE%98%E7%BD%91%EF%BC%9Ahttps://cn.vuejs.org/">https://vuejs.org/；中文官网：https://cn.vuejs.org/</a></li><li>介绍与描述：<ul><li>动态构建用户界面的渐进式 JavaScript 框架；</li></ul></li><li>Vue的特点：<ul><li>遵循 MVVM模式；</li><li>编码简洁，体积小，运行效率高，适合移动&#x2F;PC端开发；</li><li>它本身只关注UI，也可以引入其他第三方库开发项目；</li></ul></li></ul><span id="more"></span><ul><li><p>框架与库的区别：</p><ul><li><p>Library</p><p>库，本质上是一些函数的集合。每次调用函数，实现一个特定的功能，接着把控制权交给使用者</p><ul><li>代表：jQuery</li><li>jQuery这个库的核心：DOM操作，即：封装DOM操作，简化DOM操作</li></ul></li><li><p>Framework</p><p>框架，是一套完整的解决方案，使用框架的时候，需要把你的代码放到框架合适的地方，框架会在合适的时机调用你的代码</p><ul><li>框架规定了自己的编程方式，是一套完整的解决方案</li><li>使用框架的时候，由框架控制一切，我们只需要按照规则写代码</li></ul></li><li><p>主要区别</p><p>核心点：谁起到主导作用（控制反转）</p><ul><li>框架中控制整个流程的是框架</li><li>使用库，由开发人员决定如何调用库中提供的方法（辅助）</li></ul></li></ul></li><li><p>MVVM介绍</p><ul><li><p>MVVM，一种更好的UI模式解决方案</p></li><li><p><a href="http://www.cnblogs.com/indream/p/3602348.html">从Script到Code Blocks、Code Behind到MVC、MVP、MVVM - 科普</a></p></li><li><p>MVVM组成：</p><ul><li>MVVM &#x3D;&gt; M &#x2F; V &#x2F; VM</li><li>M：model数据模型</li><li>V：view视图</li><li>VM：ViewModel 视图模型</li></ul></li><li><p>优势对比</p><ul><li><p>MVC模式，将应用程序划分为三大部分，实现了职责分离</p></li><li><p>在前端中经常要通过 JS代码 来进行一些逻辑操作，最终还要把这些逻辑操作的结果现在页面中。也就是需要频繁的操作DOM</p></li><li><p>MVVM通过数据双向绑定让数据自动地双向同步</p><ul><li>V（修改数据） -&gt; M</li><li>M（修改数据） -&gt; V</li><li>数据是核心</li></ul></li><li><p>Vue这种MVVM模式的框架，不推荐开发人员手动操作DOM</p></li></ul></li><li><p>Vue中的MVVM</p><p>虽然没有完全遵循 MVVM 模型，Vue 的设计无疑受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的简称) 这个变量名表示 Vue 实例</p></li><li><p>学习 Vue 要转化思想</p><ul><li>不要再想着怎么操作DOM，而是想着如何操作数据！！！</li></ul></li></ul></li></ul><h3 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h3><h4 id="起步-Hello-Vue"><a href="#起步-Hello-Vue" class="headerlink" title="起步 - Hello Vue"></a>起步 - Hello Vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定vue管理内容区域，需要通过vue展示的内容都要放到找个元素中  通常我们也把它叫做边界 数据只在边界内部解析--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入 vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// el：提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue 实例的数据对象，用于给 View 提供数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h4><ul><li><p>注意1：先在 data 中声明数据，再使用数据</p></li><li><p>注意2：可以通过 vm.$data 访问到 data 中的所有属性，或者 vm.msg</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;大家好，...&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">$data</span>.<span class="property">msg</span> === vm.<span class="property">msg</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><ul><li>最常用的方式：<code>Mustache（插值语法）</code>，也就是 <code>&#123;&#123;&#125;&#125;` 语法；+ 解释： `&#123;&#123;&#125;&#125;</code> 从数据对象 <code>data</code> 中获取数据；</li><li>说明：数据对象的属性值发生了改变，插值处的内容都会更新；</li><li>说明：<code>&#123;&#123;&#125;&#125;` 中只能出现 JS 表达式，而不能解析 JS 语句；+ 注意：Mustache 语法不能作用在 HTML 元素的属性上；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; msg &#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 1 + 2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; isOk ? &#x27;yes&#x27;: &#x27;no&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ！！！错误示范！！！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; err &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>#### 双向数据绑定 Vue two way data binding+ 双向数据绑定：将DOM与Vue实例的data数据绑定到一起，彼此之间相互影响  + 数据的改变会引起DOM的改变  + DOM的改变也会引起数据的变化+ 原理：`Object.defineProperty`中的`get`和`set`方法  + `getter`和`setter`：访问器  + 作用：指定`读取或设置`对象属性值的时候，执行的操作+ [Vue - 深入响应式原理](https://cn.vuejs.org/v2/guide/reactivity.html)+ [MDN - `Object.defineProperty()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  defineProperty语法 介绍 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;msg&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 设置 obj.msg = &quot;1&quot; 时set方法会被系统调用 参数分别是设置后和设置前的值</span></span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) &#123;  &#125;,</span><br><span class="line">  <span class="comment">// 读取 obj.msg 时get方法会被系统调用</span></span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"> newVal, oldVal </span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>#### Vue双向绑定的极简实现+ [剖析Vue原理&实现双向绑定MVVM](https://segmentfault.com/a/1190000006599500)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;txt&quot; /&gt;</span><br><span class="line">&lt;span id=&quot;sp&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var txt = document.getElementById(&#x27;txt&#x27;),</span><br><span class="line">    sp = document.getElementById(&#x27;sp&#x27;),</span><br><span class="line">    obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 给对象obj添加msg属性，并设置setter访问器</span><br><span class="line">Object.defineProperty(obj, &#x27;msg&#x27;, &#123;</span><br><span class="line">  // 设置 obj.msg  当obj.msg反生改变时set方法将会被调用  </span><br><span class="line">  set: function (newVal) &#123;</span><br><span class="line">    // 当obj.msg被赋值时 同时设置给 input/span</span><br><span class="line">    txt.value = newVal</span><br><span class="line">    sp.innerText = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 监听文本框的改变 当文本框输入内容时 改变obj.msg</span><br><span class="line">txt.addEventListener(&#x27;keyup&#x27;, function (event) &#123;</span><br><span class="line">  obj.msg = event.target.value</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>#### 动态添加数据的注意点- 注意：只有`data`中的数据才是响应式的，动态添加进来的数据默认为非响应式- 可以通过以下方式实现动态添加数据的响应式  - `Vue.set(object, key, value)` - 适用于添加单个属性  - `Object.assign()` - 适用于添加多个属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">stu</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Vue.set */</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">stu</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Object.assign 将参数中的所有对象属性和值 合并到第一个参数 并返回合并后的对象*/</span></span><br><span class="line">vm.<span class="property">stu</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, vm.<span class="property">stu</span>, &#123; <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>, <span class="attr">height</span>: <span class="number">180</span> &#125;)</span><br></pre></td></tr></table></figure>#### 异步DOM更新- 说明：Vue 异步执行 DOM 更新，监视所有数据改变，一次性更新DOM- 优势：可以去除重复数据，对于避免不必要的计算和 避免重复 DOM 操作上，非常重要- 如果需要那到更新后dom中的数据 则需要通过 `Vue.nextTick(callback)`：在DOM更新后，执行某个操作（属于DOM操作）  - 实例调用`vm.$nextTick(function () &#123;&#125;)`  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  fn() &#123;</span><br><span class="line">    this.msg = &#x27;change&#x27;</span><br><span class="line">    this.$nextTick(function () &#123;</span><br><span class="line">      console.log(&#x27;$nextTick中打印：&#x27;, this.$el.children[0].innerText);</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(&#x27;直接打印：&#x27;, this.$el.children[0].innerText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>#### 指令- 解释：指令 (Directives) 是带有 `v-` 前缀的特殊属性- 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM##### v-text+ 解释：更新DOM对象的 textContent  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>##### v-html+ 解释：更新DOM对象的 innerHTML  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>##### v-bind+ 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM+ 语法：`v-bind:title="msg"`+ 简写：`:title="msg"`  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>##### v-on- 作用：绑定事件- 语法：`v-on:click="say"` or `v-on:click="say('参数', $event)"`- 简写：`@click="say"`- 说明：绑定的事件定义在`methods`  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>##### 事件修饰符+ .stop 阻止冒泡，调用 event.stopPropagation()+ .prevent 阻止默认行为，调用 event.preventDefault()+ .capture 添加事件侦听器时使用事件 捕获 模式+ .self 只当事件在该元素本身（比如不是子元素）触发时，才会触发事件+ .once 事件只触发一次##### v-model+ 作用：在表单元素上创建双向数据绑定+ 说明：监听用户的输入事件以更新数据+ 案例：计算器  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>##### v-for- 作用：基于源数据多次渲染元素或模板块  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- item 为当前项，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, key, index) in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>##### key 属性- 推荐：使用 `v-for` 的时候提供 `key` 属性，以获得性能提升。- 说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。- [vue key](https://cn.vuejs.org/v2/guide/list.html#key)- [vue key属性的说明](https://www.zhihu.com/question/61064119/answer/183717717)  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>##### 样式处理 class 和 style- 使用方式：`v-bind:class="expression"` or `:class="expression"`- 表达式的类型：字符串、数组、对象（重点）- 语法：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: true &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt; 解析后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;, &#x27;text-danger&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;解析后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#123; active: true &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;解析后</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- style ---</span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- baseStyles 和 overridingStyles 都是data中定义的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>##### v-if 和 v-show- [条件渲染](https://cn.vuejs.org/v2/guide/conditional.html)- `v-if`：根据表达式的值的真假条件，销毁或重建元素- `v-show`：根据表达式之真假值，切换元素的 display CSS 属性##### 提升性能：v-pre- 说明：vue会跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>##### 提升性能：v-once+ 说明：vue只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>##### 过滤器 filter+ 作用：文本数据格式化- 过滤器可以用在两个地方：`&#123;&#123;&#125;&#125;</code> 和 v-bind 表达式</li></ul><ul><li>两种过滤器：全局过滤器、局部过滤器</li></ul><h6 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h6><ul><li><p>说明：通过全局方式创建的过滤器，在任何一个vue实例中都可以使用</p></li><li><p>注意：使用全局过滤器的时候，需要先创建全局过滤器，再创建Vue实例</p></li><li><p>显示的内容由过滤器的返回值决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterName&#x27;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dateStr | date(&#x27;YYYY-MM-DD hh:mm:ss&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;date&#x27;</span>, <span class="keyword">function</span>(<span class="params">value, format</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// value 要过滤的字符串内容，比如：dateStr</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// format 过滤器的参数，比如：&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h6><ul><li><p>说明：局部过滤器是在某一个vue实例的内容创建的，只在当前实例中起作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">  <span class="comment">// 注意：此处为 filters</span></span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">filterName</span>: <span class="keyword">function</span>(<span class="params">value, format</span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="按键值修饰符"><a href="#按键值修饰符" class="headerlink" title="按键值修饰符"></a>按键值修饰符</h5><ul><li><p>说明：在监听键盘事件时，Vue 允许为 <code>v-on</code> 在监听键盘事件时添加关键修饰符</p></li><li><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6">键盘事件 - 键值修饰符</a></p></li><li><p>其他：修饰键（.ctrl等）、鼠标按键修饰符（.left等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有在 keyCode 是 13 时调用 vm.submit()</span></span><br><span class="line">@keyup<span class="number">.13</span>=<span class="string">&quot;submit&quot;</span></span><br><span class="line"><span class="comment">// 使用全局按键别名</span></span><br><span class="line">@keyup.<span class="property">enter</span>=<span class="string">&quot;add&quot;</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过全局 config.keyCodes 对象自定义键值修饰符别名</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">f2</span> = <span class="number">113</span></span><br><span class="line"><span class="comment">// 使用自定义键值修饰符</span></span><br><span class="line">@keyup.<span class="property">enter</span>.<span class="property">f2</span>=<span class="string">&quot;add&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="监视数据变化-watch"><a href="#监视数据变化-watch" class="headerlink" title="监视数据变化 - watch"></a>监视数据变化 - watch</h5><ul><li><p>概述：<code>watch</code>是一个对象，键是需要观察的表达式，值是对应回调函数</p></li><li><p>作用：当表达式的值发生变化后，会调用对应的回调函数完成响应的监视操作</p></li><li><p><a href="https://cn.vuejs.org/v2/api/#vm-watch">VUE $watch</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">age</span>: <span class="number">10</span> &#125; &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="keyword">function</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">      <span class="comment">// val 表示当前值</span></span><br><span class="line">      <span class="comment">// oldVal 表示旧值</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前值为：&#x27;</span> + val, <span class="string">&#x27;旧值为：&#x27;</span> + oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听对象属性的变化</span></span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      <span class="comment">// deep : true表示是否监听对象内部属性值的变化 </span></span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只监视user对象中age属性的变化</span></span><br><span class="line">    <span class="string">&#x27;user.age&#x27;</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><ul><li><p>说明：计算属性是基于它们的依赖进行缓存的，只有在它的依赖发生改变时才会重新求值</p></li><li><p>注意：Mustache语法 <code>(&#123;&#123;&#125;&#125;)</code> 中不要放入太多的逻辑，否则会让模板过重、难以理解和维护</p></li><li><p>注意：<strong>computed中的属性不能与data中的属性同名，否则会报错</strong></p></li><li><p><a href="http://www.cnblogs.com/kidney/p/7384835.html?utm_source=debugrun&utm_medium=referral">Vue computed属性原理</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstname</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">lastname</span>: <span class="string">&#x27;rose&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullname</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&#x27;.&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="实例生命周期"><a href="#实例生命周期" class="headerlink" title="实例生命周期"></a>实例生命周期</h4><ul><li>所有的Vue组件都是 Vue 实例，并且接受相同的选项对象即可（一些根实例特有的选项除外）。</li><li>实例生命周期也叫作：组件生命周期</li></ul><h5 id="生命周期介绍"><a href="#生命周期介绍" class="headerlink" title="生命周期介绍"></a>生命周期介绍</h5><ul><li><a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">vue生命周期钩子函数</a></li><li>简单说：<strong>一个组件从开始到最后消亡所经历的各种状态，就是一个组件的生命周期</strong></li></ul><p>生命周期钩子函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，这些事件，统称为组件的生命周期函数！</p><ul><li>注意：Vue在执行过程中会自动调用<strong>生命周期钩子函数</strong> ，我们只需要提供这些钩子函数即可</li><li>注意：钩子函数的名称都是Vue中规定好的</li></ul><h5 id="钩子函数-beforeCreate"><a href="#钩子函数-beforeCreate" class="headerlink" title="钩子函数 - beforeCreate()"></a>钩子函数 - beforeCreate()</h5><ul><li>说明：在实例初始化之后，数据观测（data observer）和 event&#x2F;watcher 事件配置之前被调用</li><li>注意：此时，无法获取 data 中的数据、methods 中的方法</li></ul><h5 id="钩子函数-created"><a href="#钩子函数-created" class="headerlink" title="钩子函数 - created()"></a>钩子函数 - created()</h5><ul><li>注意：这是一个常用的生命周期，可以调用 methods 中的方法、改变 data 中的数据</li><li><a href="https://segmentfault.com/a/1190000008879966">vue实例生命周期 参考1</a></li><li><a href="https://segmentfault.com/a/1190000008010666">vue实例生命周期 参考2</a></li><li>使用场景：发送请求获取数据</li></ul><h5 id="钩子函数-beforeMouted"><a href="#钩子函数-beforeMouted" class="headerlink" title="钩子函数 - beforeMouted()"></a>钩子函数 - beforeMouted()</h5><ul><li>说明：在挂载开始之前被调用</li></ul><h5 id="钩子函数-mounted"><a href="#钩子函数-mounted" class="headerlink" title="钩子函数 - mounted()"></a>钩子函数 - mounted()</h5><ul><li>说明：此时，vue 实例已经挂载到页面中，可以获取到 el 中的DOM元素，进行 DOM 操作</li></ul><h5 id="钩子函数-beforeUpdated"><a href="#钩子函数-beforeUpdated" class="headerlink" title="钩子函数 - beforeUpdated()"></a>钩子函数 - beforeUpdated()</h5><ul><li>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步的更改状态，这不会触发附加的重渲染过程。</li><li>注意：此处获取的数据是更新后的数据，但是获取页面中的 DOM 元素是更新之前的。</li></ul><h5 id="钩子函数-updated"><a href="#钩子函数-updated" class="headerlink" title="钩子函数 - updated()"></a>钩子函数 - updated()</h5><ul><li>说明：组件 DOM 已经更新，所以现在可以执行依赖于 DOM 的操作</li></ul><h5 id="钩子函数-beforeDestroy"><a href="#钩子函数-beforeDestroy" class="headerlink" title="钩子函数 - beforeDestroy()"></a>钩子函数 - beforeDestroy()</h5><ul><li>说明：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等。</li></ul><h5 id="钩子函数-destroyed"><a href="#钩子函数-destroyed" class="headerlink" title="钩子函数 - destroyed()"></a>钩子函数 - destroyed()</h5><ul><li>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><ul><li><p>Promise based HTTP client for the browser and node.js</p><ul><li>以 Promise 为基础的HTTP客户端，适用于：浏览器和 node.js</li><li>封装 ajax，用来发送请求，异步获取数据</li></ul></li><li><p>安装：npm i -S axios</p></li><li><p><a href="https://github.com/axios/axios">axios</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器中使用，直接引入js文件使用下面的GET/POST请求方式即可</span></span><br><span class="line"><span class="comment">// 1 引入 axios.js</span></span><br><span class="line"><span class="comment">// 2 直接调用axios提供的API发送请求</span></span><br><span class="line"><span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  axios.<span class="title function_">get</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>) &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 配合 webpack 使用方式如下：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 将 axios 添加到 Vue.prototype 中</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 在组件中使用：</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="comment">// API使用方式：</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line"><span class="title function_">axios</span>(url[, config])</span><br><span class="line"><span class="title function_">axios</span>(config)</span><br></pre></td></tr></table></figure></li></ul><h5 id="Get-请求"><a href="#Get-请求" class="headerlink" title="Get 请求"></a>Get 请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://vue.studyit.io/api/getnewslist&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// url中带有query参数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?id=89&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// url和参数分离，使用对象</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">12345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Post-请求"><a href="#Post-请求" class="headerlink" title="Post 请求"></a>Post 请求</h5><ul><li><p><a href="https://github.com/axios/axios#using-applicationx-www-form-urlencoded-format">不同环境中处理 POST请求</a></p></li><li><p>默认情况下，axios 会将JS对象序列化为 JSON 对象。为了使用 application&#x2F;x-www-form-urlencoded 格式发送请求，可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 qs 包，处理将对象序列化为字符串</span></span><br><span class="line"><span class="comment">// npm i -S qs</span></span><br><span class="line"><span class="comment">// var qs = require(&#x27;qs&#x27;)</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line">qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;) ===&gt; <span class="string">&quot;bar=123&quot;</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123; <span class="string">&#x27;bar&#x27;</span>: <span class="number">123</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/foo&#x27;</span>, <span class="string">&#x27;bar=123&amp;age=19&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://vue.studyit.io/api/postcomment/17&#x27;</span></span><br><span class="line">axios.<span class="title function_">post</span>(url, <span class="string">&#x27;content=点个赞不过份&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, qs.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求公共路径：</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://vue.studyit.io&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><ul><li><p>拦截器会拦截发送的每一个请求，请求发送之前执行 request 中的函数，请求完成之后执行 response 中的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 所有请求之前都要执行的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 所有请求完成后都要执行的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h5><ul><li>作用：进行 DOM 操作</li><li>使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点</li><li><a href="https://juejin.im/entry/58b7c5d8ac502e006cfee34a">vue 自定义指令用法实例</a></li><li>两种指令：全局指令、局部指令</li></ul><h6 id="全局自定义指令"><a href="#全局自定义指令" class="headerlink" title="全局自定义指令"></a>全局自定义指令</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：指令名称</span></span><br><span class="line"><span class="comment">// 第二个参数：配置对象，指定指令的钩子函数</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;directiveName&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// bind中只能对元素自身进行DOM操作，而无法对父级元素操作</span></span><br><span class="line">  <span class="comment">// 只调用一次 指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</span></span><br><span class="line">  <span class="title function_">bind</span>(<span class="params"> el，binding, vnode </span>) &#123;</span><br><span class="line">    <span class="comment">// 参数详解</span></span><br><span class="line">    <span class="comment">// el：指令所绑定的元素，可以用来直接操作 DOM 。</span></span><br><span class="line">    <span class="comment">// binding：一个对象，包含以下属性：</span></span><br><span class="line">      <span class="comment">// name：指令名，不包括 v- 前缀。</span></span><br><span class="line">      <span class="comment">// value：指令的绑定值，等号后面的值 。</span></span><br><span class="line">      <span class="comment">// oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</span></span><br><span class="line">      <span class="comment">// expression：字符串形式的指令表达式 等号后面的字符串 形式</span></span><br><span class="line">      <span class="comment">// arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &quot;foo&quot;。</span></span><br><span class="line">      <span class="comment">// modifiers：指令修饰符。例如：v-directive.foo.bar中，修饰符对象为 &#123; foo: true, bar: true &#125;。</span></span><br><span class="line">    <span class="comment">// vnode：Vue 编译生成的虚拟节点。。</span></span><br><span class="line">    <span class="comment">// oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// inserted这个钩子函数调用的时候，当前元素已经插入页面中了，也就是说可以获取到父级节点了</span></span><br><span class="line">  inserted (  el，binding, vnode ) &#123;&#125;,</span><br><span class="line">  <span class="comment">//  DOM重新渲染前</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">el，binding, vnode,oldVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// DOM重新渲染后</span></span><br><span class="line">  componentUpdated ( el，binding, vnode,oldVnode ) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 只调用一次，指令与元素解绑时调用</span></span><br><span class="line">  unbind ( el ) &#123;</span><br><span class="line">    <span class="comment">// 指令所在的元素在页面中消失，触发</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 简写 如果你想在 bind 和 update 时触发相同行为，而不关心其它的钩子:</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;自定义指令名&#x27;</span>, <span class="keyword">function</span>(<span class="params"> el, binding </span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">color</span> = binging.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用 注意直接些会被i成data中的数据“red” 需要字符串则嵌套引号&quot;&#x27;red&#x27;&quot;</span></span><br><span class="line">&lt;p v-color=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h6 id="局部自定义指令"><a href="#局部自定义指令" class="headerlink" title="局部自定义指令"></a>局部自定义指令</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  el : <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">directiveName</span>: &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="https://segmentfault.com/a/1190000006599500">vue 剖析Vue原理&amp;实现双向绑定MVVM</a></li></ul><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><blockquote><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件对</p></blockquote><ul><li>创建组件的两种方法：全局组件、局部组件</li></ul><h5 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h5><ul><li>说明：全局组件在所有的 Vue 实例中都可以使用</li><li>注意：<strong>先注册组件，再初始化根实例</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 注册全局组件  </span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// template 只能有一个根元素</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;A custom component!&lt;/p&gt;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件中的 `data` 必须是函数 并且函数的返回值必须是对象</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;注意：组件的data必须是一个函数！！！&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 使用：以自定义元素的方式</span></span><br><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =====&gt; 渲染结果</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 template属性的值可以是：</span></span><br><span class="line">  - <span class="number">1</span> 模板字符串</span><br><span class="line">  - <span class="number">2</span> 模板id  <span class="attr">template</span>: <span class="string">&#x27;#tpl&#x27;</span></span><br><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;tpl&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>extend： 使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册组件，传入一个扩展过的构造器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123; <span class="comment">/* ... */</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Home</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;home&#x27;</span>, <span class="title class_">Home</span>)</span><br></pre></td></tr></table></figure><h5 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h5><ul><li><p>说明：局部组件，是在某一个具体的 Vue 实例中定义的，只能在这个 Vue 实例中使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;A custom component!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 注意：此处为 components</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在当前vue实例中使用</span></span><br><span class="line">    <span class="comment">// my-component 为组件名 值为配置对象 </span></span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">``</span>,</span><br><span class="line">      data () &#123; <span class="keyword">return</span> &#123; &#125; &#125;,</span><br><span class="line">      props : []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="is特性"><a href="#is特性" class="headerlink" title="is特性"></a>is特性</h5><blockquote><p>在某些特定的标签中只能存在指定表，如ul &gt; li 如果要浏览器正常解析则需要使用 is</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 案例 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 不能识别 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">my-li</span>&gt;</span><span class="tag">&lt;/<span class="name">my-li</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">  正常识别</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">is</span>=<span class="string">&quot;my-li&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    components : &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      myLi : &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        template : <span class="string">`&lt;li&gt;内容&lt;/li&gt;`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="子组件到父组件"><a href="#子组件到父组件" class="headerlink" title="子组件到父组件"></a>子组件到父组件</h5><p>方式：父组件给子组件传递一个函数，由子组件调用这个函数</p><ul><li>说明：借助 Vue 中的自定义时间</li></ul><p>步骤：</p><ul><li>在父组件中自定义方法 parentFn</li><li>在子组件，组件引入标签中绑定自定义时间 v-on:自定义事件名&#x3D;”父组件中的方法” &#x3D;&#x3D;&gt; @pfn&#x3D;”parentFn”</li><li>子组件中通过 $emit() 触发自定义事件 this.$emit(pfn, 参数列表…)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;hello @pfn=<span class="string">&quot;parentFn&quot;</span>&gt;&lt;/hello&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;fn&quot;&gt;按钮&lt;/button&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 子组件：通过$emit调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;pfn&#x27;</span>, <span class="string">&#x27;这是子组件传递给父组件的数据&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 父组件：提供方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">parentFn</span>(<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父组件：&#x27;</span>, data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h5><blockquote><p>在简单的场景下，可以使用一个空的 Vue 实例作为事件总线</p></blockquote><ul><li><p>$on()：绑定自定义事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 绑定自定义事件</span></span><br><span class="line">bus.$on(<span class="string">&#x27;id-selected&#x27;</span>, <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发组件 A 中的事件</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;id-selected&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>示例：组件A ——&gt;组件B</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件A： --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span></span><br><span class="line">&lt;!-- 组件B： --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 中间组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 通信组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">comB</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;组件A告诉我：&#123;&#123;msg&#125;&#125;&lt;/p&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 给中间组件绑定自定义事件 注意:如果用到this 需要用箭头函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          bus.$on(<span class="string">&#x27;tellComB&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">msg</span> = msg</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">comA</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;emitFn&quot;&gt;告诉B&lt;/button&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">emitFn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 触发中间组件中的自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            bus.$emit(<span class="string">&#x27;tellComB&#x27;</span>, <span class="string">&#x27;土豆土豆我是南瓜&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h5 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h5><ul><li>通过标签指定内容展示区域</li></ul><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html代码 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 如果只有一个slot插槽 那么不需要指定名称 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;插槽名称&quot;</span>&gt;</span>我是额外的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">// js代码</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">vue</span>(&#123;</span><br><span class="line">  el : <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  components : &#123;</span><br><span class="line">    hello : &#123;</span><br><span class="line">      template : <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;我是子组件中的内容&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;slot name=&quot;名称&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="获取组件（或元素）-refs"><a href="#获取组件（或元素）-refs" class="headerlink" title="获取组件（或元素） - refs"></a>获取组件（或元素） - refs</h5><ul><li><p>说明：vm.$refs 一个对象，持有已注册过 ref 的所有子组件（或 HTML 元素）</p></li><li><p>使用：在 HTML 元素中，添加 ref 属性，然后在 JS 中通过 <code>vm.$refs.属性</code> 来获取</p></li><li><p>注意：如果获取的是一个子组件，那么通过 ref 就能获取到子组件中的 data 和 methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">my</span> <span class="attr">res</span>=<span class="string">&quot;my&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    el : <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">dv</span> <span class="comment">//获取到元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">my</span> <span class="comment">//获取到组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    components : &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      my : &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">template</span>: <span class="string">`&lt;a&gt;sss&lt;/a&gt;`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="SPA-单页面应用程序"><a href="#SPA-单页面应用程序" class="headerlink" title="SPA - 单页面应用程序"></a>SPA - 单页面应用程序</h4><h5 id="SPA：-Single-Page-Application"><a href="#SPA：-Single-Page-Application" class="headerlink" title="SPA： Single Page Application"></a>SPA： Single Page Application</h5><p>单页Web应用（single page application，SPA），就是只有一个Web页面的应用，<br>是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</p><h6 id="单页面应用程序："><a href="#单页面应用程序：" class="headerlink" title="单页面应用程序："></a>单页面应用程序：</h6><p>只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中</p><h6 id="传统多页面应用程序："><a href="#传统多页面应用程序：" class="headerlink" title="传统多页面应用程序："></a>传统多页面应用程序：</h6><p>对于传统的多页面应用程序来说, 每次请求服务器返回的都是一个完整的页面</p><h6 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h6><ul><li>减少了请求体积，加快页面响应速度，降低了对服务器的压力</li><li>更好的用户体验，让用户在web app感受native app的流畅</li></ul><h6 id="实现思路和技术点"><a href="#实现思路和技术点" class="headerlink" title="实现思路和技术点"></a>实现思路和技术点</h6><ul><li>ajax</li><li>锚点的使用（window.location.hash #）</li><li>hashchange 事件 <code>window.addEventListener(&quot;hashchange&quot;,function () &#123;&#125;)</code></li><li>监听锚点值变化的事件，根据不同的锚点值，请求相应的数据</li><li>原本用作页面内部进行跳转，定位并展示相应的内容</li></ul><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><ul><li><p>路由即：浏览器中的哈希值（# hash）与展示视图内容（template）之间的对应规则</p></li><li><p>vue中的路由是：hash 和 component的对应关系</p><p>在 Web app 中，通过一个页面来展示和管理整个应用的功能。</p><p>SPA往往是功能复杂的应用，为了有效管理所有视图内容，前端路由应运而生。</p><p>简单来说，路由就是一套映射规则（一对一的对应规则），由开发人员制定规则。</p><p>当URL中的哈希值（# hash）发生改变后，路由会根据制定好的规则，展示对应的视图内容</p></li></ul><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><ul><li>安装：npm i -S vue-router</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 5 路由入口 指定跳转到只定入口 --&gt;</span><br><span class="line">  &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">  &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 7 路由出口：用来展示匹配路由视图内容 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 1 导入 vue.js --&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 2 导入 路由文件 --&gt;</span><br><span class="line">&lt;script src=&quot;./node_modules/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 3 创建两个组件</span><br><span class="line">  const Home = Vue.component(&#x27;home&#x27;, &#123;</span><br><span class="line">    template: &#x27;&lt;h1&gt;这是 Home 组件&lt;/h1&gt;&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  const Login = Vue.component(&#x27;login&#x27;, &#123;</span><br><span class="line">    template: &#x27;&lt;h1&gt;这是 Login 组件&lt;/h1&gt;&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 4 创建路由对象</span><br><span class="line">  const router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      // 路径和组件一一对应</span><br><span class="line">      &#123; path: &#x27;/home&#x27;, component: Home &#125;,</span><br><span class="line">      &#123; path: &#x27;/login&#x27;, component: Login &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;,</span><br><span class="line">    // 6 将路由实例挂载到vue实例</span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  将path 重定向到 redirect</span></span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="路由其他配置"><a href="#路由其他配置" class="headerlink" title="路由其他配置"></a>路由其他配置</h5><ul><li>路由导航高亮<ul><li>说明：当前匹配的导航链接，会自动添加到 <code>router-link-exact-active router-link-active</code> 类</li><li>配置：linkActiveClass</li></ul></li><li>匹配路由模式：<ul><li>配置：mode</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="attr">routers</span>:[],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;hash&quot;</span>, <span class="comment">//默认hash | history 可以达到隐藏地址栏hash值 | abstract，如果发现没有浏览器的 API 则强制进入</span></span><br><span class="line">  linkActiveClass : <span class="string">&quot;now&quot;</span> <span class="comment">//当前匹配的导航链接将被自动添加now类</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路由参数："><a href="#路由参数：" class="headerlink" title="路由参数："></a>路由参数：</h5><ul><li>说明：我们经常需要把某种模式匹配到所有路由，全都映射到同一个组件，此时，可以通过路由参数来处理。</li><li>语法：&#x2F;user&#x2F;:id</li><li>使用：当匹配到一个路由时，参数值会被设置到 this.$route.params</li><li>其他：可以通过 $route.query 获取到 URL 中的查询参数等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 方式一</span><br><span class="line">&lt;router-link to=&quot;/user/1001&quot;&gt;如果你需要在模版中使用路由参数 可以这样 &#123;&#123;$router.params.id&#125;&#125;&lt;/router-link&gt;</span><br><span class="line">// 方式二</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/user&#x27;,query:&#123;name:&#x27;jack&#x27;,age:18&#125;&#125;&quot;&gt;用户 Rose&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 路由</span><br><span class="line">var router = new Router(&#123;</span><br><span class="line">  routers : [</span><br><span class="line">    // 方式一 注意 只有/user/1001这种形式能被匹配 /user | /user/ | /user/1001/ 都不能被匹配</span><br><span class="line">    // 将来通过$router.params获取参数返回 &#123;id:1001&#125;</span><br><span class="line">    &#123; path: &#x27;/user/:id&#x27;, component: User &#125;, </span><br><span class="line">    // 方式二</span><br><span class="line">    &#123; path: &quot;user&quot; , component: User&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// User组件：</span><br><span class="line">const User = &#123;</span><br><span class="line">  template: `&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;`</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;!-- 如果要子啊vue实例中获取路由参数 则使用this.$router.params 获取路由参数对象 --&gt;</span><br><span class="line">&lt;!--  &#123;&#123;$router.query&#125;&#125; 获取路由中的查询字符串 返回对象 --&gt;</span><br></pre></td></tr></table></figure><h5 id="嵌套路由-子路由"><a href="#嵌套路由-子路由" class="headerlink" title="嵌套路由 - 子路由"></a>嵌套路由 - 子路由</h5><ul><li>路由是可以嵌套的，即：路由中又包含子路由</li><li>规则：父组件中包含 router-view，在路由规则总使用 children 配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 父组件：</span><br><span class="line">const User = Vue.component(&#x27;user&#x27;, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div class=&quot;user&quot;&gt;</span><br><span class="line">      &lt;h2&gt;User Center&lt;/h2&gt;</span><br><span class="line">      &lt;router-link to=&quot;/user/profile&quot;&gt;个人资料&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/user/posts&quot;&gt;岗位&lt;/router-link&gt;</span><br><span class="line">      &lt;!-- 子路由展示在此处 --&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 子组件[简写]</span><br><span class="line">const UserProfile = &#123;</span><br><span class="line">  template: &#x27;&lt;h3&gt;个人资料：张三&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">const UserPosts = &#123;</span><br><span class="line">  template: &#x27;&lt;h3&gt;岗位：FE&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 路由</span><br><span class="line">var router =new Router(&#123;</span><br><span class="line">  routers : [</span><br><span class="line"></span><br><span class="line">    &#123; path: &#x27;/user&#x27;, component: User,</span><br><span class="line">      // 子路由配置：</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          // 当 /user/profile 匹配成功，</span><br><span class="line">          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span><br><span class="line">          path: &#x27;profile&#x27;,</span><br><span class="line">          component: UserProfile</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          // 当 /user/posts 匹配成功</span><br><span class="line">          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span><br><span class="line">          path: &#x27;posts&#x27;,</span><br><span class="line">          component: UserPosts</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h4><p>为什么需要模块化：</p><ul><li>最开始的 js 就是为了实现客户端验证以及一些简单的效果</li><li>后来，js 得到重视，应用越来越广泛，前端开发的复杂度越来越高</li><li>旧版本的 js 中没有提供与模块（module）相关的内容</li></ul><h5 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h5><ul><li>在js中，一个模块就是实现特定功能的文件</li><li>遵循模块的机制，想要什么功能就加载什么模块</li><li>模块化开发需要遵循规范</li></ul><h5 id="模块化解决的问题"><a href="#模块化解决的问题" class="headerlink" title="模块化解决的问题"></a>模块化解决的问题</h5><ul><li>命名冲突</li><li>文件依赖（加载文件）</li><li>模块的复用</li><li>统一规范和开发方式</li></ul><h5 id="JS-实现模块化的规范"><a href="#JS-实现模块化的规范" class="headerlink" title="JS 实现模块化的规范"></a>JS 实现模块化的规范</h5><ul><li>AMD 浏览器端<ul><li>requirejs</li></ul></li><li>CommonJS nodejs<ul><li>加载模块：reuire()</li><li>导出模块：module.exports&#x3D; {} &#x2F; exports &#x3D; {}</li></ul></li><li>ES6 中的 import &#x2F; export</li><li>CMD 浏览器端<ul><li>玉伯 -&gt; seajs</li></ul></li><li>UMD 通用模块化规范，可以兼容 AMD、CommonJS、浏览器中没有模块化规范 等这些语法</li></ul><h6 id="AMD的使用"><a href="#AMD的使用" class="headerlink" title="AMD的使用"></a>AMD的使用</h6><blockquote><p>Asynchronous Module Definition：异步模块定义，浏览器端模块开发的规范，代表：require.js ，特点：模块被异步加载，模块加载不影响后面语句的运行</p></blockquote><ul><li>定义模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 语法:define(name, dependencies?, factory);</span><br><span class="line">// name表示：当前模块的名称，是一个字符串 可有可无</span><br><span class="line">// dependencies表示：当前模块的依赖项，是一个数组无论依赖一项还是多项 无则不写</span><br><span class="line">// factory表示：当前模块要完成的一些功能，是一个函数</span><br><span class="line"></span><br><span class="line">// 定义对象模块</span><br><span class="line">define(&#123;&#125;)</span><br><span class="line">// 定义方法模块</span><br><span class="line">define(function() &#123;</span><br><span class="line">  return &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 定义带有依赖项的模块</span><br><span class="line">define([&#x27;js/a&#x27;], function() &#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>加载模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// - 注意：require的第一个参数必须是数组</span><br><span class="line"></span><br><span class="line">    // 参数必须是数组 表示模块路径 以当前文件为基准,通过回调函数中的参数获取加载模块中的变量 参数与模块按照顺序一一对应</span><br><span class="line">    require([&#x27;a&#x27;, &#x27;js/b&#x27;], function(a, b) &#123;</span><br><span class="line">      // 使用模块a 和 模块b 中的代码</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>路径查找配置</p><ul><li>requirejs 默认使用 baseUrl+paths 的路径解析方式</li><li>可以使用以下方式避开此设置：<ul><li>以 .js 结尾</li><li>以 &#x2F; 开始</li><li>包含协议： https:&#x2F;&#x2F; 或 http:&#x2F;&#x2F;</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 配置示例</span><br><span class="line">    // 注意配置应当在使用之前</span><br><span class="line">    require.config(&#123;</span><br><span class="line">      baseUrl: &#x27;./js&#x27; // 配置基础路径为：当前目录下的js目录</span><br><span class="line">    &#125;)</span><br><span class="line">    require([&#x27;a&#x27;])    // 查找 基础路径下的 ./js/a.js</span><br><span class="line"></span><br><span class="line">// 简化加载模块路径</span><br><span class="line">    require.config(&#123;</span><br><span class="line">      baseUrl: &#x27;./js&#x27;,</span><br><span class="line">      // 配置一次即可，直接通过路径名称（template || jquery）加载模块</span><br><span class="line">      paths: &#123;</span><br><span class="line">        template: &#x27;assets/artTemplate/template-native&#x27;,</span><br><span class="line">        jquery: &#x27;assets/jquery/jquery.min&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    // 加载jquery template模块</span><br><span class="line">    require([&#x27;jquery&#x27;, &#x27;template&#x27;])</span><br></pre></td></tr></table></figure></li><li><p>非模块化和依赖项支持</p><ul><li>添加模块的依赖模块，保证加载顺序（deps）</li><li>将非模块化模块，转化为模块化（exports）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 示例</span><br><span class="line">    require.config(&#123;</span><br><span class="line">      baseUrl: &#x27;./js&#x27;,</span><br><span class="line">      paths: &#123;</span><br><span class="line">        // 配置路径</span><br><span class="line">        noModule: &#x27;assets/demo/noModule&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      // 配置不符合规范的模块项</span><br><span class="line">      shim: &#123;</span><br><span class="line">        // 模块名称</span><br><span class="line">        noModule: &#123;</span><br><span class="line">          deps: [],         // 依赖项</span><br><span class="line">          exports: &#x27;sayHi&#x27;  // 导出模块中存在的函数或变量</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">// 注意点  如果定义模块的时候，指定了模块名称，需要使用该名称来引用模块</span><br><span class="line">    // 定义 这个模块名称与paths中的名称相同</span><br><span class="line">    define(&#x27;moduleA&#x27;, function() &#123;&#125;)</span><br><span class="line">    // 导入</span><br><span class="line">    require.config(&#123;</span><br><span class="line">      paths: &#123;</span><br><span class="line">        // 此处的模块名：moduleA</span><br><span class="line">        moduleA: &#x27;assets/demo/moduleA&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="模块加载规则"><a href="#模块加载规则" class="headerlink" title="模块加载规则"></a>模块加载规则</h5><ul><li>路径配置的优先级：<ul><li>通过 config 配置规则查找</li><li>通过 data-main 指定的路径查找</li><li>以引入 requirejs 的页面所在路径为准查找</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">  设置data-main属性</span><br><span class="line">  1 data-main属性指定的文件也会同时被加载</span><br><span class="line">  2 用于指定查找其他模块的基础路径</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h5><ul><li><a href="http://webpack.github.io/">webpack 官网</a></li><li>webpack 将带有依赖项的各个模块打包处理后，变成了独立的浏览器能够识别的文件</li><li>webpack 合并以及解析带有依赖项的模块</li></ul><h6 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h6><blockquote><p>webpack 是一个现代 JavaScript 应用程序的模块打包器（特点 module、 bundler ）</p><p>webpack 是一个<strong>模块化方案（预编译）</strong></p><p>webpack 获取具有依赖关系的模块，并生成表示这些模块的静态资源</p></blockquote><ul><li>四个核心概念：<strong>入口（entry）、输出（output）、加载器（loader）、插件（plugins）</strong></li></ul><p>对比模块化方案：webpack 和 requirejs （通过编写代码的方式将前端的功能，划分成独立的模块）</p><ul><li>browserify 是与 webpack 相似的模块化打包工具</li><li>webpack 预编译（在开发阶段通过 webpack 进行模块化处理，最终项目上线，就不在依赖于 webpack）</li><li>requirejs 线上的编译（代码运行是需要依赖于 requirejs 的）</li></ul><h6 id="webpack-起源"><a href="#webpack-起源" class="headerlink" title="webpack 起源"></a>webpack 起源</h6><p>webpack解决了现存模块打包器的两个痛点：</p><ul><li>Code Spliting - 代码分离，按需加载</li><li>静态资源的模块化处理方案</li></ul><h6 id="webpack-与模块"><a href="#webpack-与模块" class="headerlink" title="webpack 与模块"></a>webpack 与模块</h6><ul><li><a href="http://zhaoda.net/webpack-handbook/module-system.html">前端模块系统的演进</a></li><li>在 webpack 看来：所有的<strong>静态资源都是模块</strong></li><li>webpack 模块能够识别以下等形式的模块之间的依赖；</li><li>JS 的模块化规范：<ul><li>ES2015 import export</li><li>CommonJS require() module.exports</li><li>AMD define 和 require</li></ul></li><li>非 JS 等静态资源<ul><li>css &#x2F; sass &#x2F; less 文件中的 @import</li><li>图片连接，比如：样式 url(…) 或 HTML &lt;img src &#x3D; …&gt;</li><li>字体 等</li></ul></li></ul><h6 id="webpack-文档和资源"><a href="#webpack-文档和资源" class="headerlink" title="webpack 文档和资源"></a>webpack 文档和资源</h6><ul><li><a href="https://doc.webpack-china.org/">webpack 中文网</a></li><li><a href="http://webpack.github.io/docs/what-is-webpack.html">webpack 1.0</a></li><li><a href="https://webpack.js.org/">webpack 2.x+</a></li><li><a href="http://www.jianshu.com/p/42e11515c10f#">入门Webpack，看这篇就够了</a></li></ul><h6 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h6><ul><li>全局安装： npm i -g webpack<ul><li>目的：在任何目录中通过 CLI 使用 webpack 这个命令</li></ul></li><li>项目安装：npm i -D webpack<ul><li>目的：执行当前项目的构建</li></ul></li></ul><h6 id="webpackd的基本使用"><a href="#webpackd的基本使用" class="headerlink" title="webpackd的基本使用"></a>webpackd的基本使用</h6><ul><li>安装：<code>npm i -D webpack</code></li><li>webpack 的两种使用方式：命令行、配置文件（webpack.config.js）<ul><li>命令行方式演示：隔行变色<ul><li>使用 <code>npm init -y</code> 初始 package.json，使用 npm 来管理项目中的包</li><li>新建 index.html 和 index.js，实现隔行变色功能</li><li>运行 webpack src&#x2F;js&#x2F;index.js dist&#x2F;bundle.js 进行打包构建，语法是：webpack 入口文件 输出文件</li><li>注意：需要在页面中引入 输出文件 的路径（此步骤可通过配置 webpack 去掉）</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  src/js/index.js</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 1 导入 jQuery</span><br><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line">// 2 获取页面中的li元素</span><br><span class="line">const $lis = $(&#x27;#ulList&#x27;).find(&#x27;li&#x27;)</span><br><span class="line">// 3 隔行变色</span><br><span class="line">// jQuery中的 filter() 方法用来过滤jquery对象</span><br><span class="line">$lis.filter(&#x27;:odd&#x27;).css(&#x27;background-color&#x27;, &#x27;#def&#x27;)</span><br><span class="line">$lis.filter(&#x27;:even&#x27;).css(&#x27;background-color&#x27;, &#x27;skyblue&#x27;)</span><br><span class="line"></span><br><span class="line">//命令行运行 `webpack src/js/index.js   dist/bundle.js   目录生成在命令行运行目录</span><br><span class="line">/*</span><br><span class="line">  运行流程：</span><br><span class="line">  1、webpack 根据入口找到入口文件</span><br><span class="line">  2、分析js中的模块化语法 </span><br><span class="line">  3、将所有关联文件 打包合并输出到出口</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h6 id="webpack-dev-server-配置"><a href="#webpack-dev-server-配置" class="headerlink" title="webpack-dev-server 配置"></a>webpack-dev-server 配置</h6><ul><li><p>package.json 配置方式</p><ul><li>安装： <code>npm i -D webpack-dev-server</code></li><li>作用：配合 webpack ， 创建开发环境（启动服务器、监视文件变化、自动编译、刷新浏览器等），提高开发效率</li><li>注意：无法直接在终端中执行 webpack-dev-server，需要通过 package.json 的 scripts 实现</li><li>使用方式： <code>npm run dev</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数解释  注意参数是无序的 有值的参数空格隔开</span></span><br><span class="line"><span class="comment">// --open 自动打开浏览器</span></span><br><span class="line"><span class="comment">// --contentBase ./  指定浏览器 默认打开的页面路径中的 index.html 文件</span></span><br><span class="line"><span class="comment">// --open 自动打开浏览器</span></span><br><span class="line"><span class="comment">// --port 8080 端口号</span></span><br><span class="line"><span class="comment">// --hot 热更新，只加载修改的文件(按需加载修改的内容)，而非全部加载</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open --contentBase ./ --port 8080 --hot&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js 配置方式（推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;src/js/index.js&#x27;</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),   <span class="comment">// 输出文件的路径</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>                 <span class="comment">// 输出文件的名称</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="comment">// 服务器的根目录 Tell the server where to serve content from</span></span><br><span class="line">  <span class="comment">// https://webpack.js.org/configuration/dev-server/#devserver-contentbase</span></span><br><span class="line">  <span class="attr">contentBase</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./&#x27;</span>),</span><br><span class="line">  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 端口号</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------------- 1 热更新 -----------------</span></span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// ---------------- 2 启用热更新插件 ----------------</span></span><br><span class="line">  <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>html-webpack-plugin 插件</p><ul><li>安装：<code>npm i -D html-webpack-plugin</code></li><li>作用：根据末班，自动生成 html 页面</li><li>优势：页面存储在内存中，自动引入 bundle.js 、css 等文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 模板页面路径</span></span><br><span class="line">    <span class="attr">template</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./index.html&#x27;</span>),</span><br><span class="line">    <span class="comment">// 在内存中生成页面路径，默认值为：index.html</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h6 id="Loaders（加载器）"><a href="#Loaders（加载器）" class="headerlink" title="Loaders（加载器）"></a>Loaders（加载器）</h6><ul><li><a href="https://webpack.js.org/loaders/">webpack - Loaders</a></li><li><a href="https://doc.webpack-china.org/guides/asset-management">webpack - 管理资源示例</a></li></ul><blockquote><p>webpack enables use of loaders to preprocess files. This allows you to bundle any static resource way beyond JavaScript.</p></blockquote><ul><li>webpack 只能处理 JavaScript 资源</li><li>webpack 通过 loaders 处理非 JavaScripts 静态资源</li></ul><ol><li><p>CSS打包</p><ul><li>安装：<code>npm i -D style-loader css-loader</code></li><li>注意：use 中模块的顺序不能颠倒，加载顺序：从右向左加载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在index.js  导入 css 文件*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/app.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* webpack.config.js 配置各种资源文件的loader加载器*/</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 配置匹配规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// test 用来配置匹配文件规则（正则）</span></span><br><span class="line">    <span class="comment">// use  是一个数组，按照从后往前的顺序执行加载</span></span><br><span class="line">    &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 webpack 打包 sass 文件</p><ul><li>安装：<code>npm i -D sass-loader node-sass</code></li><li>注意：<code>sass-loader</code> 依赖于 <code>node-sass</code> 模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="comment">// 参考：https://webpack.js.org/loaders/sass-loader/#examples</span></span><br><span class="line"><span class="comment">// &quot;style-loader&quot;  ：creates style nodes from JS strings 创建style标签</span></span><br><span class="line"><span class="comment">// &quot;css-loader&quot;    ：translates CSS into CommonJS 将css转化为CommonJS代码</span></span><br><span class="line"><span class="comment">// &quot;sass-loader&quot;   ：compiles Sass to CSS 将Sass编译为css</span></span><br><span class="line"><span class="attr">module</span>:&#123;</span><br><span class="line">  <span class="attr">rules</span>:[</span><br><span class="line">    &#123;<span class="attr">test</span>: <span class="regexp">/\.(scss|sass)$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片和字体打包</p><ul><li>安装：<code>npm i -D url-loader file-loader</code></li><li><code>file-loader</code>：加载并重命名文件（图片、字体 等）</li><li><code>url-loader</code>：将图片或字体转化为base64编码格式的字符串，嵌入到样式文件中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>:[</span><br><span class="line">    <span class="comment">// 打包 图片文件</span></span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg)$/</span>, <span class="attr">use</span>: <span class="string">&#x27;url-loader&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打包 字体文件</span></span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>, <span class="attr">use</span>: <span class="string">&#x27;file-loader&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>图片打包细节</p><ul><li><code>limit</code>参数的作用：（单位为：字节(byte)）<ul><li>当图片文件大小（字节）<code>小于</code>指定的limit时，图片被转化为base64编码格式</li><li>当图片文件大小（字节）<code>大于等于</code>指定的limit时，图片被重命名以url路径形式加载（此时，需要<code>file-loader</code>来加载图片）</li></ul></li><li>图片文件重命名，保证相同文件不会被加载多次。例如：一张图片（a.jpg）拷贝一个副本（b.jpg），同时引入这两张图片，重命名后只会加载一次，因为这两张图片就是同一张</li><li>文件重命名以后，会通过MD5加密的方式，来计算这个文件的名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// &#123;test: /\.(jpg|png|gif|jpeg)$/, use: &#x27;url-loader?limit=100&#x27;&#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg)$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">8192</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字体文件打包说明</p><ul><li>处理方式与图片相同，可以使用：<code>file-loader</code>或<code>url-loader</code></li></ul></li></ul></li></ol><h5 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h5><ul><li><a href="https://babeljs.io/">babel</a></li><li><a href="http://2ality.com/2015/12/babel6-loose-mode.html">es2015-loose</a></li><li><a href="https://github.com/brunoyang/blog/issues/20">babel全家桶</a></li><li>安装：<code>npm i -D babel-core babel-loader</code></li><li>安装：<code>npm i -D babel-preset-env</code></li></ul><h6 id="基本使用（两步）"><a href="#基本使用（两步）" class="headerlink" title="基本使用（两步）"></a>基本使用（两步）</h6><ul><li><p>第一步：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// exclude 排除，不需要编译的目录，提高编译速度</span></span><br><span class="line">    &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二步：在项目根目录中新建<code>.babelrc</code>配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建 .babelrc 文件*/</span></span><br><span class="line"><span class="comment">// 将来babel-loader运行的时候，会检查这个配置文件，并读取相关的语法和插件配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="babel的说明"><a href="#babel的说明" class="headerlink" title="babel的说明"></a>babel的说明</h6><p>babel的作用：</p><ul><li>语法转换：将新的ES语法转化为浏览器能识别的语法（babel-preset-*）</li><li>polyfill浏览器兼容：让低版本浏览器兼容最新版ES的API</li></ul><h6 id="babel-preset"><a href="#babel-preset" class="headerlink" title="babel-preset-*"></a>babel-preset-*</h6><blockquote><p>Babel通过语法转换器，能够支持最新版本的JavaScript语法<br>babel-preset-* 用来指定我们书写的是什么版本的JS代码</p></blockquote><ul><li>作用：将新的ES语法转化为浏览器能识别的ES5代码</li><li>ES6语法提案的批准流程<ul><li>ES2015 也就是 ES6, 下一个版本是ES7, 从 ES6 到 ES7之间经历了 5 个阶段</li><li>babel-preset-es2015 转换es6的语法</li><li>babel-preset-stage-0 转换比es6更新的语法</li></ul></li></ul><h6 id="babel-polyfill-和-transform-runtime"><a href="#babel-polyfill-和-transform-runtime" class="headerlink" title="babel-polyfill 和 transform-runtime"></a>babel-polyfill 和 transform-runtime</h6><ul><li><p>作用：实现浏览器对不支持API的兼容（兼容旧环境、填补）</p><ul><li>在低版本浏览器中使用高级的ES6或ES7的方法或函数，比如：<code>&#39;abc&#39;.padStart(10)</code></li></ul></li><li><p><a href="https://babeljs.io/docs/usage/polyfill/#usage-in-node-browserify-webpack">方式一 polyfill</a></p></li><li><p><a href="https://babeljs.io/docs/plugins/transform-runtime/">方式二 transform-runtime</a></p></li><li><p>方式一：<code>npm i -S babel-polyfill</code></p></li><li><p>方式二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-plugin-transform-runtime</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S babel-runtime</span><br></pre></td></tr></table></figure><ul><li>注意：babel-runtime包中的代码会被打包到你的代码中（-S）</li></ul></li></ul><p>polyfill：所有兼容性问题，都可以通过polyfill解决（包括：实例方法），污染全局环境</p><p>runtime 除了实例方法以外，其他兼容新问题都能解决，不污染全局环境</p><p>polyfill：如果想要支持全局对象（比如：<code>Promise</code>）、静态方法（比如：<code>Object.assign</code>）或者<strong>实例方法</strong>（比如：<code>String.prototype.padStart</code>）等，那么就需要使用<code>babel-polyfill</code></p><p>babel-runtime ：提供了兼容旧环境的函数，使用的时候，需要我们自己手动引入，比如： const Promise &#x3D; require(‘babel-runtime&#x2F;core-js&#x2F;promise’)，存在的问题：</p><h5 id="vue-单文件组件"><a href="#vue-单文件组件" class="headerlink" title="vue 单文件组件"></a>vue 单文件组件</h5><ul><li><p><a href="https://vue-loader.vuejs.org/zh-cn/">vue-loader</a></p></li><li><p>single-file components(单文件组件)</p></li><li><p>后缀名：<code>.vue</code>，该文件需要被预编译后才能在浏览器中使用</p></li><li><p>注意：单文件组件依赖于两个包 <strong>vue-loader</strong> &#x2F; <strong>vue-template-compiler</strong></p></li><li><p>安装：<code>npm i -D vue-loader vue-template-compiler</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue 示例代码： --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;VUE 单文件组件示例 -- App.vue&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;这是 模板内容&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 组件中的逻辑代码</span><br><span class="line">  export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 组件样式 */</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">// webpack.config.js 配置：</span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: /\.vue$/,</span><br><span class="line">      loader: &#x27;vue-loader&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="使用单文件组件"><a href="#使用单文件组件" class="headerlink" title="使用单文件组件"></a>使用单文件组件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* main.js */</span><br><span class="line"></span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 导入 App 组件</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  // 通过 render 方法，渲染App组件</span><br><span class="line">  render: c =&gt; c(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="单文件组件使用步骤"><a href="#单文件组件使用步骤" class="headerlink" title="单文件组件使用步骤"></a>单文件组件使用步骤</h6><ul><li><p>安装：<code>npm i -D vue-loader vue-template-compiler</code></p></li><li><p>在 <code>webpack.config.js</code> 中配置 <code>.vue</code> 文件的loader</p><ul><li><code>&#123; test: /\.vue$/, use: &#39;vue-loader&#39; &#125;</code></li></ul></li><li><p>创建 <code>App.vue</code> 单文件组件，注意：App可以是任意名称</p></li><li><p>在 <code>main.js</code> 入口文件中，导入 <code>vue</code> 和 <code>App.vue</code>组件，通过 render 将组件与实例挂到一起</p></li></ul><h6 id="单文件组件-路由"><a href="#单文件组件-路由" class="headerlink" title="单文件组件 + 路由"></a>单文件组件 + 路由</h6><ul><li><a href="https://cn.vuejs.org/v2/api/#Vue-use">vue - Vue.use</a></li><li><a href="https://cn.vuejs.org/v2/guide/plugins.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6">Vue.use 和 路由</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">// ------------- vue路由配置 开始 --------------</span><br><span class="line">import Home from &#x27;./components/home/Home.vue&#x27;</span><br><span class="line">import Login from &#x27;./components/login/Login.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 1 导入 路由模块</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">// 2 ** 调用use方法使用插件 **</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">// 3 创建路由对象</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#x27;/home&#x27;, component: Home &#125;,</span><br><span class="line">    &#123; path: &#x27;/login&#x27;, component: Login &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// ------------- vue路由配置 结束 --------------</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  render: c =&gt; c(App),</span><br><span class="line">  // 4 挂载到 vue 实例中</span><br><span class="line">  router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hreatehakunari.com/categories/Vue/">Vue</category>
      
      
      <category domain="http://hreatehakunari.com/tags/Vue/">Vue</category>
      
      
      <comments>http://hreatehakunari.com/2022/03/14/Vue%E8%AF%A6%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux常用基本命令</title>
      <link>http://hreatehakunari.com/2022/03/13/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
      <guid>http://hreatehakunari.com/2022/03/13/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Sun, 13 Mar 2022 09:41:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;02-基本命令&quot;&gt;&lt;a href=&quot;#02-基本命令&quot; class=&quot;headerlink&quot; title=&quot;02 基本命令&quot;&gt;&lt;/a&gt;02 基本命令&lt;/h1&gt;&lt;h2 id=&quot;1-系统管理命令&quot;&gt;&lt;a href=&quot;#1-系统管理命令&quot; class=&quot;headerlink&quot; title=&quot;1. 系统管理命令&quot;&gt;&lt;/a&gt;1. 系统管理命令&lt;/h2&gt;&lt;h4 id=&quot;高级管理员：&quot;&gt;&lt;a href=&quot;#高级管理员：&quot; class=&quot;headerlink&quot; title=&quot;高级管理员：&quot;&gt;&lt;/a&gt;高级管理员：&lt;/h4&gt;&lt;p&gt;sudo su&lt;/p&gt;
&lt;p&gt;sudo -i&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="02-基本命令"><a href="#02-基本命令" class="headerlink" title="02 基本命令"></a>02 基本命令</h1><h2 id="1-系统管理命令"><a href="#1-系统管理命令" class="headerlink" title="1. 系统管理命令"></a>1. 系统管理命令</h2><h4 id="高级管理员："><a href="#高级管理员：" class="headerlink" title="高级管理员："></a>高级管理员：</h4><p>sudo su</p><p>sudo -i</p><span id="more"></span><h4 id="开关机命令："><a href="#开关机命令：" class="headerlink" title="开关机命令："></a>开关机命令：</h4><p>reboot 重启</p><p>shutdown 关机</p><p>halt 关机</p><p>exit 退出系统</p><p>ctrl+d 退出命令</p><p>ctrl+c 退出当前执行的命令</p><p>pwd 查看当前路径</p><h2 id="2-文件操作命令"><a href="#2-文件操作命令" class="headerlink" title="2. 文件操作命令"></a>2. 文件操作命令</h2><h4 id="ls-显示目录文件"><a href="#ls-显示目录文件" class="headerlink" title="ls: 显示目录文件"></a>ls: 显示目录文件</h4><p>-alh 查看文件类型</p><p>-a 显示目录中所有文件（包括隐藏文件）</p><p>-l 显示文件的详细信息（权限、时间、属主、属组等）</p><p>-h 显示文件大小（自动换算为B、KB、MB、G）</p><p>-d 显示目录本身信息</p><h4 id="cd-切换所在目录"><a href="#cd-切换所在目录" class="headerlink" title="cd: 切换所在目录"></a>cd: 切换所在目录</h4><p>cd ~ 切换到当前用户的家目录</p><p>cd - 切换到上一次目录</p><p>cd . 切换到当前目录</p><p>cd .. 切换到上一级目录（父目录）</p><p>cd &#x2F;xx 切换到指定路径</p><h4 id="find-查找文件"><a href="#find-查找文件" class="headerlink" title="find: 查找文件"></a>find: 查找文件</h4><p>find &#x2F; -name “文件”</p><h4 id="mkdir-创建文件夹"><a href="#mkdir-创建文件夹" class="headerlink" title="mkdir: 创建文件夹"></a>mkdir: 创建文件夹</h4><p>mkdir 文件夹名</p><p>rmdir 删除文件夹</p><h4 id="rm-删除文件"><a href="#rm-删除文件" class="headerlink" title="rm: 删除文件"></a>rm: 删除文件</h4><p>rm -rf 文件夹或者文件名，递归强制删除</p><p>​    -r 递归</p><p>​    -f 强制</p><h4 id="cp-拷贝文件"><a href="#cp-拷贝文件" class="headerlink" title="cp: 拷贝文件"></a>cp: 拷贝文件</h4><p>cp -R 源文件，目标路径（绝对路径）</p><h4 id="mv-移动文件或者重命名"><a href="#mv-移动文件或者重命名" class="headerlink" title="mv: 移动文件或者重命名"></a>mv: 移动文件或者重命名</h4><p>mv 源文件的目标地址</p><h4 id="du-x2F-df-磁盘查看命令"><a href="#du-x2F-df-磁盘查看命令" class="headerlink" title="du&#x2F;df: 磁盘查看命令"></a>du&#x2F;df: 磁盘查看命令</h4><p>df -h 查看磁盘情况</p><p>du -sh* 查看所有目录的大小</p><p>du -sh 目录 查看该目录的大小</p><h4 id="cat-输出文件所有内容"><a href="#cat-输出文件所有内容" class="headerlink" title="cat: 输出文件所有内容"></a>cat: 输出文件所有内容</h4><p>cat filename 输出filename的所有内容</p><p>cat -n filename 输出内容、显示行号</p><h4 id="head-查看文件内容（默认显示前10行）"><a href="#head-查看文件内容（默认显示前10行）" class="headerlink" title="head: 查看文件内容（默认显示前10行）"></a>head: 查看文件内容（默认显示前10行）</h4><p>head -20 查看文件，头开始20行</p><h4 id="tail-查看文件内容（默认显示后10行）"><a href="#tail-查看文件内容（默认显示后10行）" class="headerlink" title="tail: 查看文件内容（默认显示后10行）"></a>tail: 查看文件内容（默认显示后10行）</h4><p>-f filename 动态显示文件后10行（实时刷新）</p><p>-f# filename 动态显示文件后#行（实时刷新）</p><h4 id="echo-向文件内写入内容"><a href="#echo-向文件内写入内容" class="headerlink" title="echo: 向文件内写入内容"></a>echo: 向文件内写入内容</h4><p>echo xxx &gt; filename 用xxx覆盖filename的内容</p><p>echo xxx &gt;&gt; filename 在filename内容新追加一行xxx</p><h2 id="3-vi-编辑器基本命令："><a href="#3-vi-编辑器基本命令：" class="headerlink" title="3. vi 编辑器基本命令："></a>3. vi 编辑器基本命令：</h2><p>i 当前光标编辑</p><p>o 当前光标首行插入</p><p>x 删除当前光标的字符</p><p>u 撤销挡墙操作</p><p>yy 复制整行</p><p>dd 删除整行或者是剪切</p><p>p 粘贴</p><p>gg 回到首行</p><p>#G 切换到第#行</p><p>G 切换到尾行</p><p>&#x2F; 正向查找</p><p>n 查找下一个</p><p>ctrl + f 下翻页</p><p>ctrl + b 上翻页</p><p>: set un 显示行数</p><p>: set noun 不是显示行数</p><p>: %s&#x2F;old&#x2F;new&#x2F;g 查找并且替换</p><h2 id="4-Linux-压缩与解压命令"><a href="#4-Linux-压缩与解压命令" class="headerlink" title="4. Linux 压缩与解压命令"></a>4. Linux 压缩与解压命令</h2><p>tar 命令：</p><p>​    解包：tar zxvf filename.tar</p><p>​    打包：tar czvf filename.tar dirname</p><p>gz 命令：</p><p>​    解压1： gunzip filename.gz</p><p>​    解压2： gzip -d filename.gz</p><p>​    压缩： gzip filename</p><h2 id="5-常用"><a href="#5-常用" class="headerlink" title="5. 常用"></a>5. 常用</h2><p>使用vi编辑器编辑文件：vi filename</p><p>新建文件：touch filename</p><p>新建文件夹：mkdir folder-name</p><p>查看某服务运行状态：sudo systemctl status (mysql)</p><p>更新云服务器上的所有软件状态：sudo apt-get update</p><p>一键更新本机所有软件：sudo apt-get upgrade</p><h2 id="6-常用Apache-管理命令"><a href="#6-常用Apache-管理命令" class="headerlink" title="6. 常用Apache 管理命令"></a>6. 常用Apache 管理命令</h2><p>sudo systemctl start apache2    &#x2F;&#x2F;启动Apache服务器</p><p>sudo systemctl stop apache2    &#x2F;&#x2F;停止</p><p>sudo systemctl restart apache2</p><p>sudo systemctl reload apache2    &#x2F;&#x2F;不重启服务的情况下应用配置更改</p><h2 id="7-mysql相关"><a href="#7-mysql相关" class="headerlink" title="7. mysql相关"></a>7. mysql相关</h2><p>启动mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure><p>root及密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;Takanash1r1kka@&#x27;;</span><br></pre></td></tr></table></figure><p>查表的字段信息（不包含字段内容）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc table_name; </span><br></pre></td></tr></table></figure><p>mysql8后给予权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* wo &#x27;mywordpressuser&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><p>mysql8前给予权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* wo &#x27;mywordpressuser&#x27;@&#x27;%&#x27; identified by &#x27;(password)&#x27;;</span><br></pre></td></tr></table></figure><p>设置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>创建用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;用户名&#x27;@&#x27;主机地址&#x27; identified with mysql_native_password by &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure><p>修改密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;用户名&#x27;@&#x27;主机地址&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><p>查看端口监听状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ant | grep <span class="number">3306</span></span><br></pre></td></tr></table></figure><p>修改3306（mysql）端口监听地址：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf_</span><br><span class="line">bind-address=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> 或者注释掉</span><br></pre></td></tr></table></figure><h2 id="8-防火墙设置"><a href="#8-防火墙设置" class="headerlink" title="8. 防火墙设置"></a>8. 防火墙设置</h2><p>安装防火墙：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><p>启用&#x2F;禁用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw enable/disable</span><br></pre></td></tr></table></figure><p>设置白名单模式：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw default deny</span><br></pre></td></tr></table></figure><p>查看状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p>允许端口：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duso ufw allow <span class="number">80</span></span><br></pre></td></tr></table></figure><p>禁止端口：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw delete allow <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hreatehakunari.com/categories/linux/">linux</category>
      
      
      <category domain="http://hreatehakunari.com/tags/Linux/">Linux</category>
      
      
      <comments>http://hreatehakunari.com/2022/03/13/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>《head first HTML and CSS》读书笔记</title>
      <link>http://hreatehakunari.com/2022/03/12/%E3%80%8Ahead-first-HTML-and-CSS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <guid>http://hreatehakunari.com/2022/03/12/%E3%80%8Ahead-first-HTML-and-CSS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sat, 12 Mar 2022 08:37:46 GMT</pubDate>
      
      <description>&lt;h3 id=&quot;1-Web语言&quot;&gt;&lt;a href=&quot;#1-Web语言&quot; class=&quot;headerlink&quot; title=&quot;1. Web语言&quot;&gt;&lt;/a&gt;1. Web语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web服务器&lt;/strong&gt;：负责一直等待来自Web浏览器的请求（如：请求Web页面、图像或声音等资源），并把找到的资源发回给浏览器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web浏览器&lt;/strong&gt;：向Web服务器发送请求，获取HTML页面并显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-深入了解超文本-“HT”&quot;&gt;&lt;a href=&quot;#2-深入了解超文本-“HT”&quot; class=&quot;headerlink&quot; title=&quot;2. 深入了解超文本 “HT”&quot;&gt;&lt;/a&gt;2. 深入了解超文本 “HT”&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;超链接：&amp;lt;a href&amp;#x3D;”…”&amp;gt;标签可以创建一个超文本链接到另一个Web页面。&lt;/li&gt;
&lt;li&gt;“ ..&amp;#x2F; “ 代表父文件夹；&lt;/li&gt;
&lt;li&gt;不同方式展示文本：&amp;lt;e&amp;gt;&lt;/li&gt;
&lt;li&gt;文本强调：&amp;lt;strong&amp;gt;&lt;/li&gt;
&lt;li&gt;日期或时间：&amp;lt;time&amp;gt;&lt;/li&gt;
&lt;li&gt;段落：&amp;lt;p&amp;gt;&lt;/li&gt;
&lt;li&gt;换行：&amp;lt;br&amp;gt;&lt;/li&gt;
&lt;li&gt;图片：&amp;lt;image&amp;gt;&lt;/li&gt;
&lt;li&gt;短引用文本：&amp;lt;q&amp;gt;&lt;ul&gt;
&lt;li&gt;引用文本使用标签而非双引号的作用：体现出页面的结构、可以配合CSS改变引用文本的样式；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;长引用文本：&amp;lt;blockquote&amp;gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="1-Web语言"><a href="#1-Web语言" class="headerlink" title="1. Web语言"></a>1. Web语言</h3><ul><li><strong>Web服务器</strong>：负责一直等待来自Web浏览器的请求（如：请求Web页面、图像或声音等资源），并把找到的资源发回给浏览器。</li><li><strong>Web浏览器</strong>：向Web服务器发送请求，获取HTML页面并显示。</li></ul><h3 id="2-深入了解超文本-“HT”"><a href="#2-深入了解超文本-“HT”" class="headerlink" title="2. 深入了解超文本 “HT”"></a>2. 深入了解超文本 “HT”</h3><ul><li>超链接：&lt;a href&#x3D;”…”&gt;标签可以创建一个超文本链接到另一个Web页面。</li><li>“ ..&#x2F; “ 代表父文件夹；</li><li>不同方式展示文本：&lt;e&gt;</li><li>文本强调：&lt;strong&gt;</li><li>日期或时间：&lt;time&gt;</li><li>段落：&lt;p&gt;</li><li>换行：&lt;br&gt;</li><li>图片：&lt;image&gt;</li><li>短引用文本：&lt;q&gt;<ul><li>引用文本使用标签而非双引号的作用：体现出页面的结构、可以配合CSS改变引用文本的样式；</li></ul></li><li>长引用文本：&lt;blockquote&gt;</li></ul><span id="more"></span><h4 id="2-1-块元素和内联元素"><a href="#2-1-块元素和内联元素" class="headerlink" title="2.1 块元素和内联元素"></a>2.1 块元素和内联元素</h4><ul><li>&lt;blockquote&gt;是一个块（block）元素，而&lt;q&gt;是一个内联（inline）元素。<ul><li>每个块元素都单独显示，就好像前后都有一个换行。</li></ul></li></ul><h4 id="2-2-更多其他标签"><a href="#2-2-更多其他标签" class="headerlink" title="2.2 更多其他标签"></a>2.2 更多其他标签</h4><ul><li><p>列表</p><ul><li>有序列表（ordered list, ol）：使用元素&lt;ol&gt;包围列表项&lt;li&gt;，将作为一个有序列表显示；</li><li>无需列表（unordered list, ul）：使用元素&lt;ul&gt;包围列表项&lt;li&gt;，将作为一个无序列表显示；</li><li>列表项（list item, li）：使用元素&lt;li&gt;作为列表项；</li></ul><p>ex:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Walla Walla, WA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Magic City, ID<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bountiful, UT<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Last Chance, CO<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Why, AZ<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Truth or Consequences, NM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ol、ul、li都是块元素；因为在它们前后都有换行；</li></ul></li><li><p>特殊字符</p><p>当需要在Web页面中使用一些HTML的特殊字符时，需要使用其字符相应的字符实体（character entity）的简单缩写来代替。</p><ul><li>&gt;字符的缩写：&amp;gt；</li><li>&lt;字符的缩写：&amp;lt；</li><li>&amp;字符的缩写：&amp;amp；</li><li>版权符号的缩写：&amp;copyright；</li></ul></li></ul><h3 id="3-“连接”"><a href="#3-“连接”" class="headerlink" title="3. “连接”"></a>3. “连接”</h3><ul><li>FTP：文件传输协议（File Transfer Protocol）</li><li>网站发布：p130</li></ul><h4 id="3-1-URL"><a href="#3-1-URL" class="headerlink" title="3.1 URL"></a>3.1 URL</h4><ul><li>URL是什么：在浏览器中输入的Web地址称为URL，统一资源定位符（Uniform Resource Locators）。是一个全局地址，可以用来定位Web上的任意资源。除了指定资源的位置，URL还可以指定用来获取资源的协议。</li><li>URL拆解：<ul><li><code>http/https</code>：指出用来获取资源的协议；</li><li><code>www.xxx.com</code>：网站名；</li><li><code>/index.html/</code>：从根文件夹到资源的绝对路径；</li></ul></li></ul><h4 id="3-2-HTTP"><a href="#3-2-HTTP" class="headerlink" title="3.2 HTTP"></a>3.2 HTTP</h4><ul><li>HTTP是什么：超文本传输协议（Hypertext Transfer Protocol），是在Web上传输超文本文档的公认方法（协议）。</li><li>在每次浏览器的地址栏中输入一个URL时，浏览器就会使用HTTP向服务器请求响应的资源。</li><li>除此之外还有 <code>file</code> 、<code>ftp</code> 、<code>mail</code> 、<code>https</code> 等协议</li></ul><h4 id="3-3-绝对路径"><a href="#3-3-绝对路径" class="headerlink" title="3.3 绝对路径"></a>3.3 绝对路径</h4><ul><li>绝对路径告诉服务器如何从根文件夹到达某个特定的页面或文件，绝对路径总是从“根”开始（用”&#x2F;“表示根）。<ul><li>例如：”&#x2F;cars&#x2F;new&#x2F;inventory.html”</li></ul></li></ul><h4 id="3-4-完善的Web页面"><a href="#3-4-完善的Web页面" class="headerlink" title="3.4 完善的Web页面"></a>3.4 完善的Web页面</h4><ul><li><p>为链接增加标题以便访问：&lt;a&gt;元素有一个 <code>title</code> 属性，就是用来提供链接信息的。</p><p>ex:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://wickedlysmart.com/buzz&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">title</span>=<span class="string">&quot;Read all about caffeine on the Buzz&quot;</span>&gt;</span>Caffeine Buzz<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>想要直接链接到页面中的某个特定位置，使用 &lt;a&gt; 元素的 <code>id</code> 属性，允许直接访问页面中的某个特定点。</p><ul><li><p>先找到页面中要创建锚点的位置，可以是页面上的任何文本。</p></li><li><p>为目标选择一个标识符名，并插入在其 <code>id</code> 属性中；</p></li><li><p>若想要链接到页面中的特定目标，只需在链接后添加一个 “#” ，再加上目标的标识符，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html#chai&quot;</span>&gt;</span>See Chai Tea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5 总结"></a>3.5 总结</h4><ul><li>将以上几部分结合起来（协议+服务器+网站+绝对路径），就有了一个URL，利用URL，可以请求浏览器从Web获取一个页面。<ul><li>协议部分告诉浏览器应该使用什么方法来获取资源；</li><li>网站部分告诉浏览器要从互联网上的哪个计算机获取资源；</li><li>绝对路径部分告诉服务器要找的资源是哪个资源；</li></ul></li><li>如果浏览器向Web服务器请求一个目录而不是文件时，如：<code>http://www.starbuzzcoffee.com/images/</code>，会发生什么？<ul><li>Web服务器收到类似这样的请求时，会尝试查找这个目录中的一个默认文件。通常默认文件名为”index.html”或”default.html”，找到了就会返回给浏览器显示；</li><li>若请求的URL结尾没有加上’&#x2F;‘，如<code>http://www.starbuzzcoffee.com</code>，若这个目录确实存在，服务器会帮忙加上末尾的斜线，改为<code>http://www.starbuzzcoffee.com/</code>，就会寻找默认文件，等同于<code>http://www.starbuzzcoffee.com/index.html</code></li></ul></li><li>页面工作流程：<ul><li>用户在浏览器中输入<code>http://www.starbuzzcoffee.com/drinks</code>；</li><li>浏览器向Web服务器发送HTTP请求：我能得到文件”&#x2F;drinks&#x2F;“吗？</li><li>服务器得到了目录，寻找目录下的默认文件，并找到了”&#x2F;drinks&#x2F;index.html”文件；</li><li>Web服务器向浏览器发送HTTP响应，并发送文件”&#x2F;drinks&#x2F;index.html”；</li></ul></li><li>端口：网站名就像一个小区地址，端口就像是地址的门牌号。通常Web上所有东西都会传送到一个默认端口。</li></ul>]]></content:encoded>
      
      
      <category domain="http://hreatehakunari.com/categories/web/">web</category>
      
      
      <category domain="http://hreatehakunari.com/tags/HTML/">HTML</category>
      
      <category domain="http://hreatehakunari.com/tags/css/">css</category>
      
      
      <comments>http://hreatehakunari.com/2022/03/12/%E3%80%8Ahead-first-HTML-and-CSS%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初次Hexo博客搭建</title>
      <link>http://hreatehakunari.com/2022/03/12/%E5%88%9D%E6%AC%A1Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <guid>http://hreatehakunari.com/2022/03/12/%E5%88%9D%E6%AC%A1Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Sat, 12 Mar 2022 07:36:43 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;1-设置菜单&quot;&gt;&lt;a href=&quot;#1-设置菜单&quot; class=&quot;headerlink&quot; title=&quot;1. 设置菜单&quot;&gt;&lt;/a&gt;1. 设置菜单&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;主题配置文件，即 &lt;code&gt;themes/next&lt;/code&gt; 下的_config.yml，查找menu；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“||”前面的是目标链接，后面是图标名称，next 使用的图标全是&lt;a href=&quot;https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application&quot;&gt;图标库 - Font Awesome 中文网&lt;/a&gt;的，有想用的图标直接在fontawesome上找图标的名称就行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新添加的菜单需要翻译对应的中文，打开&lt;code&gt;theme/next/languages/zh-CN.yml&lt;/code&gt;，在menu下设置：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;menu:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;home:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;首页&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;archives:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;归档&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;categories:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;分类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;tags:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;about:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;关于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;resources:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;search:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;搜索&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;若要添加 menu ，在此添加一个即可，上面的 resources 就是另外添加的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="1-设置菜单"><a href="#1-设置菜单" class="headerlink" title="1. 设置菜单"></a>1. 设置菜单</h4><ul><li><p>主题配置文件，即 <code>themes/next</code> 下的_config.yml，查找menu；</p></li><li><p>“||”前面的是目标链接，后面是图标名称，next 使用的图标全是<a href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application">图标库 - Font Awesome 中文网</a>的，有想用的图标直接在fontawesome上找图标的名称就行。</p></li><li><p>新添加的菜单需要翻译对应的中文，打开<code>theme/next/languages/zh-CN.yml</code>，在menu下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">    <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">    <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="string">资源</span></span><br><span class="line">    <span class="attr">search:</span> <span class="string">搜索</span></span><br></pre></td></tr></table></figure><p>若要添加 menu ，在此添加一个即可，上面的 resources 就是另外添加的。</p><span id="more"></span></li><li><p>根目录下 cmd：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;resources&quot;</span><br></pre></td></tr></table></figure><p>此时根目录的 sources 文件夹下会生成 categories、tags、about、resources 四个文件，每个文件中有一个 <code>index.md</code> 文件，修改内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 资源</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-设置建站时间"><a href="#2-设置建站时间" class="headerlink" title="2. 设置建站时间"></a>2. 设置建站时间</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2022-03</span></span><br></pre></td></tr></table></figure><h4 id="3-设置头像"><a href="#3-设置头像" class="headerlink" title="3. 设置头像"></a>3. 设置头像</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">/images/avatar.gif</span><span class="comment">#图片位置</span></span><br><span class="line"><span class="attr">rounded:</span> <span class="literal">true</span><span class="comment">#头像展示在圈里</span></span><br><span class="line"><span class="attr">rotated:</span> <span class="literal">false</span><span class="comment">#头像随光标旋转</span></span><br></pre></td></tr></table></figure><p>将头像图片放置于 <code>themes/next/source/images</code> 中；</p><h4 id="4-网站图标设置"><a href="#4-网站图标设置" class="headerlink" title="4. 网站图标设置"></a>4. 网站图标设置</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line"><span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line"><span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line"><span class="comment">#其他的不改动</span></span><br></pre></td></tr></table></figure><h4 id="5-设置动态背景"><a href="#5-设置动态背景" class="headerlink" title="5. 设置动态背景"></a>5. 设置动态背景</h4><h5>5.1 canvas nest 风格</h5><p><img src="/../images/2022_03_12_Hexo/Canvas.png" alt="Canvas"></p><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure><p>注：这段代码要放在有数据的代码上方（yml文件到后面有些代码未配置数据，放在它们前面），否则运行不到这里。</p><h4 id="6-设置背景图片"><a href="#6-设置背景图片" class="headerlink" title="6. 设置背景图片"></a>6. 设置背景图片</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>打开 <code>Blog/source</code> 创建文件 <code>_data/styles.styl</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加背景图片</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: url(/images/background.png);<span class="comment">//设定背景图片，images同处于source文件夹下</span></span><br><span class="line">      <span class="attribute">background-repeat</span>: no-repeat;<span class="comment">//设定背景图片非重复填充</span></span><br><span class="line">      <span class="attribute">background-attachment</span>: fixed;<span class="comment">//设置背景图片不随页面滚动</span></span><br><span class="line">      <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;<span class="comment">//设置背景图片位置</span></span><br><span class="line">      <span class="attribute">background-size</span>: cover;<span class="comment">//设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-主页文章添加阴影效果"><a href="#7-主页文章添加阴影效果" class="headerlink" title="7. 主页文章添加阴影效果"></a>7. 主页文章添加阴影效果</h4><p><code>source/_data/style.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="8-添加顶部加载条"><a href="#8-添加顶部加载条" class="headerlink" title="8. 添加顶部加载条"></a>8. 添加顶部加载条</h4><p><code>themes/next</code> git clone：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure><p><code>themes/next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure><h4 id="9-设置预览概要"><a href="#9-设置预览概要" class="headerlink" title="9. 设置预览概要"></a>9. 设置预览概要</h4><p>next（v7.7.1）已经没有如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>所以不需要设置，只要在文章中插入：</p><p><code>&lt;!-- more --&gt;</code>，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮。</p><h4 id="10-设置侧边栏显示效果"><a href="#10-设置侧边栏显示效果" class="headerlink" title="10. 设置侧边栏显示效果"></a>10. 设置侧边栏显示效果</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position. #设置侧边栏位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#  - post    默认显示模式</span></span><br><span class="line">  <span class="comment">#  - always  一直显示</span></span><br><span class="line">  <span class="comment">#  - hide    初始隐藏</span></span><br><span class="line">  <span class="comment">#  - remove  移除侧边栏</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h4 id="11-侧边栏推荐阅读"><a href="#11-侧边栏推荐阅读" class="headerlink" title="11. 侧边栏推荐阅读"></a>11. 侧边栏推荐阅读</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">链接网站</span>  <span class="comment">#修改名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: http://yoursite.com</span></span><br><span class="line">  <span class="string">百度:</span> <span class="string">https://baidu.com</span></span><br><span class="line">  <span class="string">鱼C论坛:</span> <span class="string">https://fishc.com.cn</span></span><br></pre></td></tr></table></figure><h4 id="12-添加社交链接"><a href="#12-添加社交链接" class="headerlink" title="12. 添加社交链接"></a>12. 添加社交链接</h4><p><code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/fengye97</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yinhongfei1018@163.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">https://www.zhihu.com/people/mai-nv-hai-de-xiao-huo-chai-35-19</span> <span class="string">||</span> <span class="string">gratipay</span></span><br><span class="line">  <span class="attr">CSDN:</span> <span class="string">https://https://blog.csdn.net/Later_001</span> <span class="string">||</span> <span class="string">codiepie</span></span><br></pre></td></tr></table></figure><p>“||” 前面的是链接，后面的是 <a href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application"> FontAwesome</a> 图标名称</p><h4 id="13-设置博文内链接为蓝色"><a href="#13-设置博文内链接为蓝色" class="headerlink" title="13. 设置博文内链接为蓝色"></a>13. 设置博文内链接为蓝色</h4><p><code>themes/next/source/css/_common/components/post/post.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> a&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">     <span class="selector-pseudo">&amp;:hover</span> &#123;</span><br><span class="line">       <span class="attribute">color</span>: <span class="number">#0477ab</span>;</span><br><span class="line">       <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="14-显示文章字数和阅读时长"><a href="#14-显示文章字数和阅读时长" class="headerlink" title="14. 显示文章字数和阅读时长"></a>14. 显示文章字数和阅读时长</h4><p>根目录 Blog 下 cmd：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>站点配置文件 <code>Blog/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure><h4 id="15-显示站点文章总字数"><a href="#15-显示站点文章总字数" class="headerlink" title="15. 显示站点文章总字数"></a>15. 显示站点文章总字数</h4><p>根目录 Blog 下 cmd：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p><code>themes/next/layout/_partials/footer.swig</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;theme-info&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;powered-by&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-count&quot;</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="16-设置文章末尾“本文结束”标记"><a href="#16-设置文章末尾“本文结束”标记" class="headerlink" title="16. 设置文章末尾“本文结束”标记"></a>16. 设置文章末尾“本文结束”标记</h4><p><code>themes/next/layout/_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:24px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>themes/next/layout/_macro/post.swig</code>，在post-footer前添加代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>主题配置文件，末尾添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="17-文章末尾添加版权说明"><a href="#17-文章末尾添加版权说明" class="headerlink" title="17. 文章末尾添加版权说明"></a>17. 文章末尾添加版权说明</h4><p>主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>  <span class="comment"># 将false改为true即可显示版权信息</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><h4 id="18-添加访问量统计"><a href="#18-添加访问量统计" class="headerlink" title="18. 添加访问量统计"></a>18. 添加访问量统计</h4><p>主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>themes/next/layout/_partials/footer.swig</code>，最后添加内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">theme.busuanzi_count.enable</span> <span class="string">%</span>&#125;</span><br><span class="line">    <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span></span><br><span class="line">    <span class="string">&lt;span</span> <span class="string">class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line">    <span class="string">&lt;span</span> <span class="string">id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span</span> <span class="string">id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span></span><br><span class="line">    <span class="string">&lt;span</span> <span class="string">class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">不蒜子计数初始值纠正</span> <span class="string">--&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">$(document).ready(function()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">var</span> <span class="string">int</span> <span class="string">=</span> <span class="string">setInterval(fixCount</span>, <span class="number">50</span><span class="string">);</span>  <span class="string">//</span> <span class="string">50ms周期检测函数</span></span><br><span class="line">    <span class="string">var</span> <span class="string">countOffset</span> <span class="string">=</span> <span class="number">20000</span><span class="string">;</span>  <span class="string">//</span> <span class="string">初始化首次数据</span></span><br><span class="line"></span><br><span class="line">    <span class="string">function</span> <span class="string">fixCount()</span> &#123;            </span><br><span class="line">       <span class="string">if</span> <span class="string">(document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display</span> <span class="type">!=</span> <span class="string">&quot;none&quot;</span><span class="string">)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">$(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html())</span> <span class="string">+</span> <span class="string">countOffset);</span> </span><br><span class="line">            <span class="string">clearInterval(int);</span></span><br><span class="line">        &#125;                  </span><br><span class="line">        <span class="string">if</span> <span class="string">($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;)</span> <span class="type">!=</span> <span class="string">&quot;none&quot;</span><span class="string">)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">$(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html())</span> <span class="string">+</span> <span class="string">countOffset);</span> <span class="string">//</span> <span class="string">加上初始数据</span> </span><br><span class="line">            <span class="string">clearInterval(int);</span> <span class="string">//</span> <span class="string">停止检测</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">&#125;<span class="string">);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span> </span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="19-安装RSS插件"><a href="#19-安装RSS插件" class="headerlink" title="19. 安装RSS插件"></a>19. 安装RSS插件</h4><p>为什么要安装RSS？简单来说，RSS是一种协议，允许网站将其内容或其部分内容提供给其他网站或应用程序。通过使用RSS，可以节省宝贵时间，并将各个站点提供的新闻和信息组织到一个中心点进行查看，也可以通过从使用RSS联合其内容的其他站点导入新闻来向你的站点添加新闻。</p><ul><li>安装 hexo-generator-fees 插件</li></ul><p>RSS需要有一个 Feed 链接，而这个链接需要靠 hexo-generator-feed 插件来生成，所以第一步要添加插件。</p><p>Blog 根目录 cmd：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><ul><li>配置 feed 信息：</li></ul><p>在<strong>站点配置文件</strong>末尾添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">rss2.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>配置RSS</li></ul><p>打开<strong>主题配置文件</strong>，搜索RSS，取消注释：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">follow_me:</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/username || twitter</span></span><br><span class="line">  <span class="comment">#Telegram: https://t.me/channel_name || telegram</span></span><br><span class="line">  <span class="string">微信:</span> <span class="string">/images/wechat_channel.jpg</span> <span class="string">||</span> <span class="string">wechat</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">rss</span></span><br></pre></td></tr></table></figure><h4 id="20-忽略要编译的文件"><a href="#20-忽略要编译的文件" class="headerlink" title="20. 忽略要编译的文件"></a>20. 忽略要编译的文件</h4><p>搜索引擎确认网站所有权时往往会提供一个html文件来进行验证，要是这个文件被渲染了，验证自然就会失败了。或者，有时候会有一些文件不希望Hexo渲染的，因此有必要针对某个文件或者目录进行排除。Hexo的配置文件中提供了配置项skip_render。只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span>   <span class="comment">#部署时不包含的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单个文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">hello.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单个文件夹下全部文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test/*</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#单个文件夹下指定类型文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test/*.md</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#单个文件夹下全部文件以及子目录</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">test/**</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#跳过多个目录，或者多个文件</span></span><br><span class="line"><span class="attr">skip_render:</span> [<span class="string">&#x27;*.html&#x27;</span>, <span class="string">demo/**</span>, <span class="string">test/*</span>]</span><br></pre></td></tr></table></figure><h4 id="21-代码块样式定义："><a href="#21-代码块样式定义：" class="headerlink" title="21. 代码块样式定义："></a>21. 代码块样式定义：</h4><p><code>Blog/source/_data/styles.styl</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大代码块的自定义样式</span></span><br><span class="line"><span class="selector-class">.highlight</span>, pre &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, pre &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="22-Hexo博客提交百度-x2F-Google收录"><a href="#22-Hexo博客提交百度-x2F-Google收录" class="headerlink" title="22. Hexo博客提交百度&#x2F;Google收录"></a>22. Hexo博客提交百度&#x2F;Google收录</h4><p>这篇文章写得很详细：<a href="https://link.zhihu.com/?target=https://www.jianshu.com/p/f8ec422ebd52">Hexo博客提交百度和Google收录</a></p><h4 id="23-添加打赏"><a href="#23-添加打赏" class="headerlink" title="23. 添加打赏"></a>23. 添加打赏</h4><p>主题配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>   <span class="comment">#改为true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">原创技术分享，您的支持将鼓励我继续创作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span>   <span class="comment">#将前面的#去掉</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span>         <span class="comment">#将前面的#去掉</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://hreatehakunari.com/categories/web/">web</category>
      
      
      <category domain="http://hreatehakunari.com/tags/Blog/">Blog</category>
      
      <category domain="http://hreatehakunari.com/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
      
      <category domain="http://hreatehakunari.com/tags/Hexo/">Hexo</category>
      
      
      <comments>http://hreatehakunari.com/2022/03/12/%E5%88%9D%E6%AC%A1Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
